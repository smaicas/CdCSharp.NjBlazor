@page "/docs"

@using CdCSharp.NjBlazor.Core
@using CdCSharp.NjBlazor.Features.Containers.Components
@using CdCSharp.NjBlazor.Features.Controls.Components.Button.LinkButton
@using CdCSharp.NjBlazor.Features.Controls.Components.Button.TextButton
@using CdCSharp.NjBlazor.Features.DeviceManager.Components
@using CdCSharp.NjBlazor.Features.Dom.Abstractions
@using CdCSharp.NjBlazor.Features.Forms.Text
@using CdCSharp.NjBlazor.Features.Layout.Components.Grid
@using CdCSharp.NjBlazor.Features.Layout.Components.Sidebar
@using CdCSharp.NjBlazor.Features.Layout.Components.Spacer
@using CdCSharp.NjBlazor.Features.Layout.Components.Stack
@using CdCSharp.NjBlazor.Features.Layout.Components.Tree
@using CdCSharp.NjBlazor.Features.Media.Components
@using CdCSharp.NjBlazor.IntegrationTests.Wasm.Components
@using Microsoft.Extensions.Localization
@using System.Reflection

@inject IStringLocalizer<Docs> Loc
@inject IDOMJsInterop DomJs

<PageTitle>@Loc["CdCSharp NjBlazor - Documentation"]</PageTitle>

<NjDeviceManager @ref="_deviceManager" DeviceWidthChanged="StateHasChanged" />

<div class="nj-menu-toggle">
    @if (IsOpen)
    {
        <NjSvgIcon OnClick="ToggleOpen" Icon="@Features.Media.Icons.NjIcons.Materials.MaterialIcons.i_menu_open"></NjSvgIcon>
    }
    else
    {
        <NjSvgIcon OnClick="ToggleOpen" Icon="@Features.Media.Icons.NjIcons.Materials.MaterialIcons.i_menu"></NjSvgIcon>
    }
</div>
@if (IsOpen)
{
    <div class="nj-menu-content nj-px-4">
            <NjTree Direction="FlexDirectionMode.Column">

                <NjTreeNode>
                    <Title>@Loc["Core Components"]</Title>
                    <ChildContent>

                        <NjTreeNode>
                            <Title><NjTextButton Text="@Loc["CSS Variables"]" OnClick="async ()=> await ShowComponent(typeof(PageCssVariables))" /></Title>
                        </NjTreeNode>
                        <NjTreeNode>
                            <Title><NjTextButton Text="@Loc["Theme Mode"]" OnClick="async ()=> await ShowComponent(typeof(PageThemeMode))" /></Title>
                        </NjTreeNode>
                        <NjTreeNode>
                            <Title><NjTextButton Text="@Loc["Localization"]" OnClick="async ()=> await ShowComponent(typeof(PageLocalization))" /></Title>
                        </NjTreeNode>
                        <NjTreeNode>
                            <Title><NjTextButton Text="@Loc["Icon List"]" OnClick="async ()=> await ShowComponent(typeof(PageIconsList))" /></Title>
                        </NjTreeNode>
                        <NjTreeNode>
                            <Title><NjTextButton Text="@Loc["Colors Palette"]" OnClick="async ()=> await ShowComponent(typeof(PageColorsPalette))" /></Title>
                        </NjTreeNode>
                        <NjTreeNode>
                            <Title><NjTextButton Text="@Loc["Device Manager"]" OnClick="async ()=> await ShowComponent(typeof(PageDeviceManager))" /></Title>
                        </NjTreeNode>


                    </ChildContent>
                </NjTreeNode>
                <NjTreeNode>
                    <Title>@Loc["Layout Components"]</Title>
                    <ChildContent>

                        <NjTreeNode>
                            <Title><NjTextButton Text="@Loc["Containers"]" OnClick="async ()=> await ShowComponent(typeof(PageContainers))" /></Title>
                            <ChildContent>
                                <NjTreeNode>
                                    <Title><NjTextButton Text="@Loc["Border Box"]" OnClick="async ()=> await ShowComponent(typeof(PageContainersBorderBox))" /></Title>
                                </NjTreeNode>
                                <NjTreeNode>
                                    <Title><NjTextButton Text="@Loc["Fit Content"]" OnClick="async ()=> await ShowComponent(typeof(PageContainersFitContent))" /></Title>
                                </NjTreeNode>
                                <NjTreeNode>
                                    <Title><NjTextButton Text="@Loc["Grid"]" OnClick="async ()=> await ShowComponent(typeof(PageContainersGrid))" /></Title>
                                </NjTreeNode>
                                <NjTreeNode>
                                    <Title><NjTextButton Text="@Loc["Input Control"]" OnClick="async ()=> await ShowComponent(typeof(PageContainersInputControl))" /></Title>
                                </NjTreeNode>
                                <NjTreeNode>
                                    <Title><NjTextButton Text="@Loc["Shadow Box"]" OnClick="async ()=> await ShowComponent(typeof(PageContainersShadowBox))" /></Title>
                                </NjTreeNode>
                                <NjTreeNode>
                                    <Title><NjTextButton Text="@Loc["Stack"]" OnClick="async ()=> await ShowComponent(typeof(PageContainersStack))" /></Title>
                                </NjTreeNode>
                            </ChildContent>
                        </NjTreeNode>
                        <NjTreeNode>
                            <Title><NjTextButton Text="@Loc["Spinner"]" OnClick="async ()=> await ShowComponent(typeof(PageSpinner))" /></Title>
                        </NjTreeNode>
                        <NjTreeNode>
                            <Title><NjTextButton Text="@Loc["Tabs"]" OnClick="async ()=> await ShowComponent(typeof(PageTabs))" /></Title>
                        </NjTreeNode>
                        <NjTreeNode>
                            <Title><NjTextButton Text="@Loc["Tree"]" OnClick="async ()=> await ShowComponent(typeof(PageTree))" /></Title>
                        </NjTreeNode>
                        <NjTreeNode>
                            <Title><NjTextButton Text="@Loc["Table"]" OnClick="async ()=> await ShowComponent(typeof(PageTable))" /></Title>
                        </NjTreeNode>
                    </ChildContent>
                </NjTreeNode>
                <NjTreeNode>
                    <Title>@Loc["Other Features"]</Title>
                    <ChildContent>

                        <NjTreeNode>
                            <Title><NjTextButton Text="@Loc["Code Highlight"]" OnClick="async ()=> await ShowComponent(typeof(PageCodeHighlight))" /></Title>
                        </NjTreeNode>
                        <NjTreeNode>
                            <Title><NjTextButton Text="@Loc["Draggable"]" OnClick="async ()=> await ShowComponent(typeof(PageDraggable))" /></Title>
                        </NjTreeNode>
                        <NjTreeNode>
                            <Title><NjTextButton Text="@Loc["Markdown Renderer"]" OnClick="async ()=> await ShowComponent(typeof(PageMarkdownRender))" /></Title>
                        </NjTreeNode>
                        <NjTreeNode>
                            <Title><NjTextButton Text="@Loc["ColorPicker"]" OnClick="async ()=> await ShowComponent(typeof(PageColorPicker))" /></Title>
                        </NjTreeNode>

                    </ChildContent>
                </NjTreeNode>
                <NjTreeNode>
                    <Title>@Loc["Forms"]</Title>
                    <ChildContent>
                        <NjTreeNode>
                            <Title>
                                <NjTextButton Text="@Loc["Forms"]" OnClick="async ()=> await ShowComponent(typeof(PageForms))" />
                            </Title>
                        </NjTreeNode>
                    </ChildContent>
                </NjTreeNode>
                <NjTreeNode>
                    <Title>@Loc["Buttons"]</Title>
                    <ChildContent>
                        <NjTreeNode>
                            <Title>
                                <NjTextButton Text="@Loc["Buttons"]" OnClick="async ()=> await ShowComponent(typeof(PageButtons))" />
                            </Title>
                        </NjTreeNode>
                    </ChildContent>
                </NjTreeNode>
                <NjTreeNode>
                    <Title>@Loc["Search"]</Title>
                    <ChildContent>
                        <NjTreeNode>
                            <Title>
                                <NjTextButton Text="@Loc["Search"]" OnClick="async ()=> await ShowComponent(typeof(PageSearch))" />
                            </Title>
                        </NjTreeNode>
                    </ChildContent>
                </NjTreeNode>
                <NjTreeNode>
                    <Title>@Loc["Meter"]</Title>
                    <ChildContent>
                        <NjTreeNode>
                            <Title>
                                <NjTextButton Text="@Loc["Meter"]" OnClick="async ()=> await ShowComponent(typeof(PageMeter))" />
                            </Title>
                        </NjTreeNode>
                    </ChildContent>
                </NjTreeNode>
                <NjTreeNode>
                    <Title>@Loc["Media"]</Title>
                    <ChildContent>
                        <NjTreeNode>
                            <Title>
                                <NjTextButton Text="@Loc["Media"]" OnClick="async ()=> await ShowComponent(typeof(PageMedia))" />
                            </Title>
                        </NjTreeNode>
                    </ChildContent>
                </NjTreeNode>
                <NjTreeNode>
                    <Title>@Loc["Audio"]</Title>
                    <ChildContent>
                        <NjTreeNode>
                            <Title>
                                <NjTextButton Text="@Loc["Audio"]" OnClick="async ()=> await ShowComponent(typeof(PageAudio))" />
                            </Title>
                        </NjTreeNode>
                    </ChildContent>
                </NjTreeNode>

                <NjTreeNode>
                    <Title>
                        <NjInputText Placeholder="@Loc["Glossary"]"
                        PreAdornment="@Features.Media.Icons.NjIcons.Materials.MaterialIcons.i_search"
                        @bind-Value="_searchValue" />
                    </Title>
                </NjTreeNode>
                @foreach (KeyValuePair<char, List<dynamic>> docItemKv in GetDocItems())
                {
                    <NjTreeNode OpenFunction="(n)=> _searchValue.Length > 2 && docItemKv.Value.Any(di=> di.Name.Contains(_searchValue))">
                        <Title>
                            <div class="nj-p-1">
                                @docItemKv.Key
                            </div>
                        </Title>
                        <ChildContent>

                            @foreach (var docItem in docItemKv.Value)
                            {
                                <NjTreeNode OpenFunction="(n)=> _searchValue.Length > 2 && docItem.Name.Contains(_searchValue)">

                                    <Title>
                                        <NjTextButton FormControl="false"
                                        OnClick="async ()=> await ShowComponent((Type)docItem.ComponentType)"
                                        Text="@docItem.Name">
                                        </NjTextButton>
                                    </Title>

                                </NjTreeNode>
                            }

                        </ChildContent>
                    </NjTreeNode>
                }

            </NjTree>
    </div>
}

<NjSpacer VerticalRelativeToQuery=".nj-menu-toggle"></NjSpacer>

<NjGrid TemplateColumnsSpecific="100%" AlignItems="AlignItemsMode.Start" JustifyItems="JustifyItemsMode.FlexStart">
    <NjGridCell>

        @if (_dynamicComponent != null)
        {
            <NjFitContent class="nj-p-4">
                <DynamicComponent Type="_dynamicComponent"></DynamicComponent>
            </NjFitContent>
        }
    </NjGridCell>
</NjGrid>


@code {
    private string _searchValue = string.Empty;

    NjDeviceManager? _deviceManager;

    Type? _dynamicComponent;

    private bool IsOpen { get; set; } = true;

    private string OpenClass => IsOpen ? CssClassReferences.Open : string.Empty;

    private async Task ToggleOpen()
    {

        IsOpen = !IsOpen;
        if (IsOpen)
        {
            await GoToTop();
        }
    }

    private async Task ShowComponent(Type type)
    {
        _dynamicComponent = type;
        if (IsOpen)
        {
            await ToggleOpen();
        }
        StateHasChanged();
    }

    private Dictionary<char, List<dynamic>> GetDocItems()
    {
        var docTypes = Assembly.GetExecutingAssembly().GetTypes().Where(t => t.Namespace == "CdCSharp.NjBlazor.IntegrationTests.Wasm.Components.DocComponents" && t.Name != nameof(Components.DocComponents.AllDocs));

        return docTypes.Select(t =>
        {
            string name = t.Name.Split("_")
                                    .Reverse()
                                    .Skip(1)
                                    .First();
            return (dynamic)new
            {
                Name = name,
                ComponentType = t,
            };
        }).OrderBy(e => e.Name)
            .GroupBy(t => (char)t.Name[0])
            .ToDictionary(g => g.Key, g => g.ToList());
    }

    private async Task GoToTop()
    {
        await DomJs.ScrollTopAsync();
    }
}

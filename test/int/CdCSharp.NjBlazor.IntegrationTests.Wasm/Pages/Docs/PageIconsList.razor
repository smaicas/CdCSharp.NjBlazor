@page "/docs/iconsList"

@using System.Reflection
@using CdCSharp.NjBlazor.Core
@using CdCSharp.NjBlazor.Features.Layout.Components.Stack
@using CdCSharp.NjBlazor.Features.Markdown.Components
@using CdCSharp.NjBlazor.Features.Media.Components
@using CdCSharp.NjBlazor.Features.Layout.Components.Spinner
@using CdCSharp.NjBlazor.Features.Markdown

<NjStack class="nj-p-5" Direction="FlexDirectionMode.Row">
    @foreach (var iconString in Icons)
    {
        @iconString.Key
        <NjSvgIcon Icon="@iconString.Value" />
    }

</NjStack>
<div class="nj-p-5">

    <NjMarkdownFragment Content="@(async () => await new HttpClient().GetStringAsync("https://raw.githubusercontent.com/wiki/smaicas/CdCSharp.NjBlazor/Icon-List.md"))"></NjMarkdownFragment>

</div>

@code {
    RenderFragment? Fragment;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            HttpClient client = new HttpClient();
            string contentMd = await client.GetStringAsync("https://raw.githubusercontent.com/wiki/smaicas/CdCSharp.NjBlazor/Icon-List.md");

            Fragment = MarkdownToRenderFragmentParser.ParseText(contentMd);
            await InvokeAsync(StateHasChanged);
        }
    }

    private Dictionary<string, string> Icons = new Dictionary<string, string>();
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            foreach (Type iconType in typeof(Features.Media.Icons.NjIcons).GetNestedTypes())
            {
                foreach (Type iconSubType in iconType.GetNestedTypes())
                {
                    FieldInfo[] iconProperties = iconSubType.GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy);

                    foreach (var property in iconProperties)
                    {
                        string? iconString = (string?)property.GetValue(null);
                        if (iconString != null)
                        {
                            Icons.Add($"{iconType.Name} | {iconSubType.Name} | {property.Name}", iconString);

                        }
                    }
                }

            }
            StateHasChanged();
        }

    }
}

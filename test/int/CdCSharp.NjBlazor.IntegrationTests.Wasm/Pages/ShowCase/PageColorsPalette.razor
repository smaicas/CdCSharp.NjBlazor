@page "/colorspalette"

@using System.Reflection
@using CdCSharp.NjBlazor.Core
@using CdCSharp.NjBlazor.Core.Css
@using CdCSharp.NjBlazor.Features.Layout.Components.Stack
@using CdCSharp.NjBlazor.Features.Layout.Components.Spinner
@using CdCSharp.NjBlazor.Features.Markdown

<div class="nj-p-5">

    @if (Fragment == null)
    {
        <NjSpinner Variant="NjSpinnerVariant.Default" />
    }
    else
    {
        @Fragment
    }

</div>

<style>
    .color-block{
        min-height:10em;
    }

    .shadowed-text {
        color: white;
        text-shadow: -2px -2px 0 black, 2px -2px 0 black, -2px 2px 0 black, 2px 2px 0 black;
    }
</style>



<NjStack Direction="FlexDirectionMode.Row">
    @foreach (Type colorType in typeof(NjColors).GetNestedTypes())
    {
        PropertyInfo[] colorProperties = colorType.GetProperties(BindingFlags.Public | BindingFlags.Static);

        <div class="nj-p-2">

            <h3>@colorType.Name</h3>
            <NjStack Spacing="0">
                @foreach (PropertyInfo colorProperty in colorProperties)
                {
                    CssColor? color = (CssColor)colorProperty.GetValue(null);
                    string rgbaColor = color.ToString();
                    string propertyName = colorProperty.Name;
                    <div class="color-block shadowed-text" style="background-color: @rgbaColor;">
                        @propertyName
                    </div>
                }
            </NjStack>

        </div>
    }
</NjStack>

@code {
    RenderFragment? Fragment;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            HttpClient client = new HttpClient();
            string contentMd = await client.GetStringAsync("https://raw.githubusercontent.com/wiki/smaicas/CdCSharp.NjBlazor/Colors-Palette.md");

            Fragment = MarkdownToRenderFragmentParser.ParseText(contentMd);
            await InvokeAsync(StateHasChanged);
        }
    }
}

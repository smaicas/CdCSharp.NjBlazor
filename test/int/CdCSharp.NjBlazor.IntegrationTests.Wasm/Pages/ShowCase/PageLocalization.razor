@page "/localization"

@using CdCSharp.NjBlazor.Features.Containers.Components
@using CdCSharp.NjBlazor.Features.Forms.Dropdown
@using CdCSharp.NjBlazor.Features.Localization.Components
@using Microsoft.Extensions.Localization
@using CdCSharp.NjBlazor.Features.Layout.Components.Spinner
@using CdCSharp.NjBlazor.Features.Markdown

@inject IStringLocalizer<PageLocalization> Loc

<div class="nj-p-5">

    @if (Fragment == null)
    {
        <NjSpinner Variant="NjSpinnerVariant.Default" />
    }
    else
    {
        @Fragment
    }

</div>

<h2>NjLocalizationSelect</h2>

<h3>NjDropdownOptionsPosition.TopRight OnlyIcon</h3>
<NjFitContent>
    <NjLocalizationSelect OptionsPosition="NjDropdownOptionsPosition.TopRight"
                          OnlyIcon="@Features.Media.Icons.NjIcons.Materials.MaterialIconsRound.i_language" />
</NjFitContent>

<div>@Loc["Localized string"]</div>

<br />

<h3>NjDropdownOptionsPosition.Center</h3>

<NjFitContent>
    <NjLocalizationSelect OptionsPosition="NjDropdownOptionsPosition.Center" />
</NjFitContent>

<div>@Loc["Localized string"]</div>

@code {
    RenderFragment? Fragment;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            HttpClient client = new HttpClient();
            string contentMd = await client.GetStringAsync("https://raw.githubusercontent.com/wiki/smaicas/CdCSharp.NjBlazor/Localization.md");

            Fragment = MarkdownToRenderFragmentParser.ParseText(contentMd);
            await InvokeAsync(StateHasChanged);
        }
    }
}

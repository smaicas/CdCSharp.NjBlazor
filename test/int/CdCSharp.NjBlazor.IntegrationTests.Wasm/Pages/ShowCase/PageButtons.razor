@page "/buttons"

@using CdCSharp.NjBlazor.Core.Css
@using CdCSharp.NjBlazor.Features.Controls.Components.Button.ActionButton
@using CdCSharp.NjBlazor.Features.Controls.Components.Button.LinkButton
@using CdCSharp.NjBlazor.Features.Controls.Components.Button.TextButton
@using CdCSharp.NjBlazor.Features.Controls.Components.Button.TextButton.ActivableTextButton
@using CdCSharp.NjBlazor.Features.Controls.Components.Meter
@using CdCSharp.NjBlazor.Features.Controls.Components.Search
@using CdCSharp.NjBlazor.Features.Layout.Components.Spinner
@using CdCSharp.NjBlazor.Features.Markdown

<div class="nj-p-5">

    @if (FragmentTextButton == null)
    {
        <NjSpinner Variant="NjSpinnerVariant.Default" />
    }
    else
    {
        @FragmentTextButton
    }

</div>

<div class="nj-p-5 nj-w-100">
    <h2>NjTextButton</h2>
    <NjTextButton FormControl="true" Text="Test Button Flat" Variant="NjTextButtonVariant.Flat"></NjTextButton>
    <NjTextButton FormControl="true" Text="Test Button Flat" Variant="NjTextButtonVariant.Flat" PreAdornment="@Features.Media.Icons.NjIcons.Materials.MaterialIconsRound.i_airplanemode_inactive" PostAdornment="@Features.Media.Icons.NjIcons.Materials.MaterialIconsRound.i_fluorescent"
                  PostAdornmentColor="@NjColors.Indigo.Default"></NjTextButton>

    <NjTextButton FormControl="true" Text="Test Button Raised" Variant="NjTextButtonVariant.Raised"></NjTextButton>
    <NjTextButton FormControl="true" Text="Test Button Outline" Variant="NjTextButtonVariant.Outline"></NjTextButton>
    <NjTextButton FormControl="true" Text="Test Button Flat Bg" Variant="NjTextButtonVariant.Flat" BackgroundColor="@NjColors.Maroon.Default"></NjTextButton>
    <NjTextButton FormControl="true" Text="Test Button Raised Bg" Variant="NjTextButtonVariant.Raised" BackgroundColor="@NjColors.Moccasin.Default"></NjTextButton>

    <h3>Disabled</h3>
    <NjTextButton FormControl="true" Disabled="true" OnClick="DisabledClick" Text="Test Button Flat" Variant="NjTextButtonVariant.Flat"></NjTextButton>
    <NjTextButton FormControl="true" Disabled="true" OnClick="DisabledClick" Text="Test Button Raised" Variant="NjTextButtonVariant.Raised"></NjTextButton>
</div>

<div class="nj-p-5">

    @if (FragmentActionButton == null)
    {
        <NjSpinner Variant="NjSpinnerVariant.Default" />
    }
    else
    {
        @FragmentActionButton
    }

</div>
<div class="nj-p-5 nj-w-100">
    <h2>NjActionButton</h2>
    <NjActionButton FormControl="true" Icon="@Features.Media.Icons.NjIcons.Materials.MaterialIcons.i_save"
                    Color="@NjColors.Indigo.Default"
                    Variant="NjActionButtonVariant.Flat"></NjActionButton>
    <NjActionButton FormControl="true" Icon="@Features.Media.Icons.NjIcons.Materials.MaterialIcons.i_save"
                    Color="@NjColors.Indigo.Default"
                    Variant="NjActionButtonVariant.Raised"></NjActionButton>
    <NjActionButton FormControl="true" Icon="@Features.Media.Icons.NjIcons.Materials.MaterialIcons.i_save"
                    Color="@NjColors.Indigo.Default"
                    Variant="NjActionButtonVariant.Outline"></NjActionButton>
    <NjActionButton FormControl="true" Icon="@Features.Media.Icons.NjIcons.Materials.MaterialIcons.i_save"
                    Color="@NjColors.Indigo.Default"
                    BackgroundColor="NjColors.Green.Lighten3"
                    Variant="NjActionButtonVariant.Raised"></NjActionButton>

    <h3>Disabled</h3>
    <NjActionButton Disabled="true" FormControl="true" Icon="@Features.Media.Icons.NjIcons.Materials.MaterialIcons.i_save"
                    Color="@NjColors.Indigo.Default"
                    Variant="NjActionButtonVariant.Raised"></NjActionButton>
    <NjActionButton Disabled="true" FormControl="true" Icon="@Features.Media.Icons.NjIcons.Materials.MaterialIcons.i_save"
                    Color="@NjColors.Indigo.Default"
                    BackgroundColor="NjColors.Green.Lighten3"
                    Variant="NjActionButtonVariant.Raised"></NjActionButton>
</div>

<div class="nj-p-5">

    @if (FragmentActivableTextButton == null)
    {
        <NjSpinner Variant="NjSpinnerVariant.Default" />
    }
    else
    {
        @FragmentActivableTextButton
    }

</div>
<div class="nj-p-5 nj-w-100">
    <h2>NjActivableTextButton</h2>
    <NjActivableTextButton FormControl="true" Text="Test Button UnderLine" Variant="NjActivableTextButtonVariant.UnderLine"></NjActivableTextButton>
    <NjActivableTextButton FormControl="true" Text="Test Button LeftLine" Variant="NjActivableTextButtonVariant.LeftLine"></NjActivableTextButton>
    <NjActivableTextButton FormControl="true" Text="Test Button RightLine" Variant="NjActivableTextButtonVariant.RightLine"></NjActivableTextButton>
    <NjActivableTextButton FormControl="true" Text="Test Button TopLine" Variant="NjActivableTextButtonVariant.TopLine"></NjActivableTextButton>
</div>

<div class="nj-p-5">

    @if (FragmentLinkButton == null)
    {
        <NjSpinner Variant="NjSpinnerVariant.Default" />
    }
    else
    {
        @FragmentLinkButton
    }

</div>
<div class="nj-p-5 nj-w-100">
    <h2>NjLinkButton</h2>
    <NjLinkButton FormControl="true" Text="Test Button Flat" Variant="NjLinkButtonVariant.Flat"></NjLinkButton>
    <NjLinkButton FormControl="true" Text="Test Button Raised" Variant="NjLinkButtonVariant.Raised"></NjLinkButton>
    <NjLinkButton FormControl="true" Text="Test Button Outline" Variant="NjLinkButtonVariant.Outline"></NjLinkButton>
</div>

@code {

    RenderFragment? FragmentTextButton;
    RenderFragment? FragmentLinkButton;
    RenderFragment? FragmentActionButton;
    RenderFragment? FragmentActivableTextButton;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            HttpClient client = new HttpClient();
            string textButtonMd = await client.GetStringAsync("https://raw.githubusercontent.com/wiki/smaicas/CdCSharp.NjBlazor/Buttons-TextButton.md");
            string linkButtonMd = await client.GetStringAsync("https://raw.githubusercontent.com/wiki/smaicas/CdCSharp.NjBlazor/Buttons-LinkButton.md");
            string actionButtonMd = await client.GetStringAsync("https://raw.githubusercontent.com/wiki/smaicas/CdCSharp.NjBlazor/Buttons-ActionButton.md");
            string activableTextButtonMd = await client.GetStringAsync("https://raw.githubusercontent.com/wiki/smaicas/CdCSharp.NjBlazor/Buttons-ActivableTextButton.md");

            FragmentTextButton = MarkdownToRenderFragmentParser.ParseText(textButtonMd);
            FragmentLinkButton = MarkdownToRenderFragmentParser.ParseText(linkButtonMd);
            FragmentActionButton = MarkdownToRenderFragmentParser.ParseText(actionButtonMd);
            FragmentActivableTextButton = MarkdownToRenderFragmentParser.ParseText(activableTextButtonMd);
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task DisabledClick(MouseEventArgs args)
    {
        var a = args;
    }
}

@page "/table"
@using System.ComponentModel.DataAnnotations
@using CdCSharp.NjBlazor.Features.Table
@using System.Reflection
@using CdCSharp.NjBlazor.Features.Layout.Components.Spinner
@using CdCSharp.NjBlazor.Features.Markdown

<div class="nj-p-5">

    @if (Fragment == null)
    {
        <NjSpinner Variant="NjSpinnerVariant.Default" />
    }
    else
    {
        @Fragment
    }

</div>

<style>
    .demo-controls {
        display: flex;
        gap: 2rem;
        padding: 1rem;
        background-color: #f8f9fa;
        border-radius: 0.5rem;
        margin-bottom: 1rem;
    }

    .form-group {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

        .form-group label {
            margin: 0;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

    .progress {
        height: 20px;
    }

    .badge {
        padding: 0.5em 0.75em;
        border-radius: 0.25rem;
    }

    .btn-group {
        display: flex;
        gap: 0.25rem;
    }

    .btn-sm {
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
    }
</style>

<h2>NjTable</h2>

<div class="demo-controls mb-4">
    <div class="form-group">
        <label>
            <input type="checkbox" @bind="tableConfig.ShowGlobalFilter" />
            Show Global Filter
        </label>
    </div>
    <div class="form-group">
        <label>
            <input type="checkbox" @bind="tableConfig.ShowColumnFilters" />
            Show Column Filters
        </label>
    </div>
    <div class="form-group">
        <label>
            <input type="checkbox" @bind="tableConfig.EnableSorting" />
            Enable Sorting
        </label>
    </div>
    <div class="form-group">
        <label>
            Page Size:
            <select @bind="tableConfig.PageSize">
                <option value="5">5</option>
                <option value="10">10</option>
                <option value="20">20</option>
                <option value="50">50</option>
            </select>
        </label>
    </div>
</div>

<NjTable T="DemoProduct" Items="products" Configuration="tableConfig" />

@code {
    RenderFragment? Fragment;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            HttpClient client = new HttpClient();
            string contentMd = await client.GetStringAsync("https://raw.githubusercontent.com/wiki/smaicas/CdCSharp.NjBlazor/Table.md");

            Fragment = MarkdownToRenderFragmentParser.ParseText(contentMd);
            await InvokeAsync(StateHasChanged);
        }
    }

    private List<DemoProduct> products = new();
    private NjTableConfiguration<DemoProduct> tableConfig;

    protected override void OnInitialized()
    {
        // Initialize demo data
        products = GenerateDemoProducts();

        // Configure table
        tableConfig = new NjTableConfiguration<DemoProduct>
            {
                PageSize = 10,
                ShowGlobalFilter = true,
                ShowColumnFilters = true,
                EnableSorting = true,
                EnablePagination = true,
                Columns = new List<NjTableColumn<DemoProduct>>
            {
                new()
                {
                    Title = "Product ID",
                    Property = p => p.Id,
                    Width = "10%",
                    CustomComponent = new BadgeComponent()
                },
                new()
                {
                    Title = "Name",
                    Property = p => p.Name,
                    Width = "20%",
                    FilterPlaceholder = "Search by name..."
                },
                new()
                {
                    Title = "Category",
                    Property = p => p.Category,
                    Width = "15%",
                    FilterPlaceholder = "Filter category..."
                },
                new()
                {
                    Title = "Price",
                    Property = p => p.Price,
                    Width = "15%",
                    CustomComponent = new PriceComponent()
                },
                new()
                {
                    Title = "Stock",
                    Property = p => p.Stock,
                    Width = "10%",
                    CustomComponent = new StockComponent()
                },
                new()
                {
                    Title = "Rating",
                    Property = p => p.Rating,
                    Width = "15%",
                    CustomComponent = new RatingComponent()
                },
            }
            };
    }

    private List<DemoProduct> GenerateDemoProducts()
    {
        var categories = new[] { "Electronics", "Books", "Clothing", "Food", "Sports" };
        var products = new List<DemoProduct>();
        var random = new Random();

        for (int i = 1; i <= 50; i++)
        {
            products.Add(new DemoProduct
                {
                    Id = i,
                    Name = $"Product {i}",
                    Category = categories[random.Next(categories.Length)],
                    Price = Math.Round(random.NextDouble() * 1000, 2),
                    Stock = random.Next(0, 100),
                    Rating = Math.Round(random.NextDouble() * 4 + 1, 1)
                });
        }

        return products;
    }

    // Demo event handlers
    private void HandleEdit(int id)
    {
        // Demo purpose only
        Console.WriteLine($"Edit product {id}");
    }

    private async Task HandleDelete(int id)
    {
        products.RemoveAll(p => p.Id == id);
        StateHasChanged();
    }

    // Demo Product class
    public class DemoProduct
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Category { get; set; }
        public double Price { get; set; }
        public int Stock { get; set; }
        public double Rating { get; set; }
    }

    // Custom component implementations
    public class BadgeComponent : INjCellComponent
    {
        public RenderFragment CreateComponent<TItem>(TItem item, PropertyInfo property)
        {
            return builder =>
            {
                var value = property.GetValue(item)?.ToString();
                builder.OpenElement(0, "span");
                builder.AddAttribute(1, "class", "badge bg-secondary");
                builder.AddContent(2, $"#{value}");
                builder.CloseElement();
            };
        }
    }

    public class PriceComponent : INjCellComponent
    {
        public RenderFragment CreateComponent<TItem>(TItem item, PropertyInfo property)
        {
            return builder =>
            {
                var price = (double)property.GetValue(item);
                builder.OpenElement(0, "span");
                builder.AddAttribute(1, "class", "text-success fw-bold");
                builder.AddContent(2, $"${price:N2}");
                builder.CloseElement();
            };
        }
    }

    public class StockComponent : INjCellComponent
    {
        public RenderFragment CreateComponent<TItem>(TItem item, PropertyInfo property)
        {
            return builder =>
            {
                var stock = (int)property.GetValue(item);
                var colorClass = stock > 50 ? "success" : stock > 20 ? "warning" : "danger";

                builder.OpenElement(0, "div");
                builder.AddAttribute(1, "class", $"progress");
                builder.OpenElement(2, "div");
                builder.AddAttribute(3, "class", $"progress-bar bg-{colorClass}");
                builder.AddAttribute(4, "style", $"width: {stock}%");
                builder.AddAttribute(5, "role", "progressbar");
                builder.AddContent(6, stock);
                builder.CloseElement();
                builder.CloseElement();
            };
        }
    }

    public class RatingComponent : INjCellComponent
    {
        public RenderFragment CreateComponent<TItem>(TItem item, PropertyInfo property)
        {
            return builder =>
            {
                var rating = (double)property.GetValue(item);
                builder.OpenElement(0, "div");

                for (int i = 0; i < 5; i++)
                {
                    builder.OpenElement(1, "i");
                    builder.AddAttribute(2, "class",
                        i < Math.Floor(rating) ? "fas fa-star text-warning" :
                        i < rating ? "fas fa-star-half-alt text-warning" :
                        "far fa-star text-warning");
                    builder.CloseElement();
                }

                builder.AddContent(3, $" ({rating:N1})");
                builder.CloseElement();
            };
        }
    }

    public class ActionsComponent<TItem> : INjCellComponent
    {
        public RenderFragment CreateComponent<TItem>(TItem item, PropertyInfo property)
        {
            return builder =>
            {
                var id = (int)property.GetValue(item);

                builder.OpenElement(0, "div");
                builder.AddAttribute(1, "class", "btn-group");

                // Edit button
                builder.OpenElement(2, "button");
                builder.AddAttribute(3, "class", "btn btn-sm btn-outline-primary");
                builder.AddAttribute(4, "onclick", EventCallback.Factory.Create(this, () => HandleEdit<TItem>(item)));
                builder.AddContent(5, "Edit");
                builder.CloseElement();

                // Delete button
                builder.OpenElement(6, "button");
                builder.AddAttribute(7, "class", "btn btn-sm btn-outline-danger");
                builder.AddAttribute(8, "onclick", EventCallback.Factory.Create(this, () => HandleDelete<TItem>(item)));
                builder.AddContent(9, "Delete");
                builder.CloseElement();

                builder.CloseElement();
            };
        }

        private void HandleEdit<TItem>(TItem id)
        {
            Console.WriteLine($"Edit product {id}");
        }

        private async Task HandleDelete<TItem>(TItem id)
        {
            // Note: In a real application, you'd want to implement proper state management
            Console.WriteLine($"Delete product {id}");
        }
    }
}


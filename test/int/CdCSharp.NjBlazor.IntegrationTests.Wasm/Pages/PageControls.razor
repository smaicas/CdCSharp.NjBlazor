@page "/controls"

@using CdCSharp.NjBlazor.Core.Css
@using CdCSharp.NjBlazor.Features.Controls.Components.Button.ActionButton
@using CdCSharp.NjBlazor.Features.Controls.Components.Button.LinkButton
@using CdCSharp.NjBlazor.Features.Controls.Components.Button.TextButton
@using CdCSharp.NjBlazor.Features.Controls.Components.Button.TextButton.ActivableTextButton
@using CdCSharp.NjBlazor.Features.Controls.Components.Meter
@using CdCSharp.NjBlazor.Features.Controls.Components.Search

<NavLink href="/">Return Index</NavLink>

<div class="nj-p-5 nj-w-100">
    <h2>NJ TEXT BUTTON</h2>
    <NjTextButton FormControl="true" Text="Test Button Flat" Variant="NjTextButtonVariant.Flat"></NjTextButton>
    <NjTextButton FormControl="true" Text="Test Button Flat" Variant="NjTextButtonVariant.Flat" PreAdornment="@Features.Media.Icons.NjIcons.Materials.MaterialIconsRound.i_airplanemode_inactive" PostAdornment="@Features.Media.Icons.NjIcons.Materials.MaterialIconsRound.i_fluorescent"
                  PostAdornmentColor="@NjColors.Indigo.Default"></NjTextButton>

    <NjTextButton FormControl="true" Text="Test Button Raised" Variant="NjTextButtonVariant.Raised"></NjTextButton>
    <NjTextButton FormControl="true" Text="Test Button Outline" Variant="NjTextButtonVariant.Outline"></NjTextButton>
    <NjTextButton FormControl="true" Text="Test Button Flat Bg" Variant="NjTextButtonVariant.Flat" BackgroundColor="@NjColors.Maroon.Default"></NjTextButton>
    <NjTextButton FormControl="true" Text="Test Button Raised Bg" Variant="NjTextButtonVariant.Raised" BackgroundColor="@NjColors.Moccasin.Default"></NjTextButton>

    <h4>Disabled</h4>
    <NjTextButton FormControl="true" Disabled="true" OnClick="DisabledClick" Text="Test Button Flat" Variant="NjTextButtonVariant.Flat"></NjTextButton>
    <NjTextButton FormControl="true" Disabled="true" OnClick="DisabledClick" Text="Test Button Raised" Variant="NjTextButtonVariant.Raised"></NjTextButton>
</div>
<div class="nj-p-5 nj-w-100">
    <h2>NJ ACTION BUTTON</h2>
    <NjActionButton FormControl="true" Icon="@Features.Media.Icons.NjIcons.Materials.MaterialIcons.i_save"
                    Color="@NjColors.Indigo.Default"
                    Variant="NjActionButtonVariant.Flat"></NjActionButton>
    <NjActionButton FormControl="true" Icon="@Features.Media.Icons.NjIcons.Materials.MaterialIcons.i_save"
                    Color="@NjColors.Indigo.Default"
                    Variant="NjActionButtonVariant.Raised"></NjActionButton>
    <NjActionButton FormControl="true" Icon="@Features.Media.Icons.NjIcons.Materials.MaterialIcons.i_save"
                    Color="@NjColors.Indigo.Default"
                    Variant="NjActionButtonVariant.Outline"></NjActionButton>
    <NjActionButton FormControl="true" Icon="@Features.Media.Icons.NjIcons.Materials.MaterialIcons.i_save"
                    Color="@NjColors.Indigo.Default"
                    BackgroundColor="NjColors.Green.Lighten3"
                    Variant="NjActionButtonVariant.Raised"></NjActionButton>

    <h4>Disabled</h4>
    <NjActionButton Disabled="true" FormControl="true" Icon="@Features.Media.Icons.NjIcons.Materials.MaterialIcons.i_save"
                    Color="@NjColors.Indigo.Default"
                    Variant="NjActionButtonVariant.Raised"></NjActionButton>
    <NjActionButton Disabled="true" FormControl="true" Icon="@Features.Media.Icons.NjIcons.Materials.MaterialIcons.i_save"
                    Color="@NjColors.Indigo.Default"
                    BackgroundColor="NjColors.Green.Lighten3"
                    Variant="NjActionButtonVariant.Raised"></NjActionButton>
</div>

<div class="nj-p-5 nj-w-100">
    <h2>NJ ACTIVABLE TEXT BUTTON</h2>
    <NjActivableTextButton FormControl="true" Text="Test Button UnderLine" Variant="NjActivableTextButtonVariant.UnderLine"></NjActivableTextButton>
    <NjActivableTextButton FormControl="true" Text="Test Button LeftLine" Variant="NjActivableTextButtonVariant.LeftLine"></NjActivableTextButton>
    <NjActivableTextButton FormControl="true" Text="Test Button RightLine" Variant="NjActivableTextButtonVariant.RightLine"></NjActivableTextButton>
    <NjActivableTextButton FormControl="true" Text="Test Button TopLine" Variant="NjActivableTextButtonVariant.TopLine"></NjActivableTextButton>
</div>

<div class="nj-p-5 nj-w-100">
    <h2>NJ LINK BUTTON</h2>
    <NjLinkButton FormControl="true" Text="Test Button Flat" Variant="NjLinkButtonVariant.Flat"></NjLinkButton>
    <NjLinkButton FormControl="true" Text="Test Button Raised" Variant="NjLinkButtonVariant.Raised"></NjLinkButton>
    <NjLinkButton FormControl="true" Text="Test Button Outline" Variant="NjLinkButtonVariant.Outline"></NjLinkButton>
</div>

<div class="nj-p-5">
    <h2>NJ METER</h2>
    <NjMeter MaxWidthPx="300" Low="25" High="50" Optimum="75" FormControl="true" Value="15"></NjMeter>
    <NjMeter MaxWidthPx="300" Low="25" High="50" Optimum="75" FormControl="true" Value="55"></NjMeter>
    <NjMeter MaxWidthPx="300" Low="25" High="50" Optimum="75" FormControl="true" Value="90"></NjMeter>

</div>

<div class="nj-p-5">
    <h2>NjSearch Adornments</h2>
    <NjSearch SearchFuntion="(p, search)=>p.Name.Contains(search)"
              SourceData="@Source"
              DynamicSearch="false"
              TSearchObject="ProductSample"
              DisplayFunction="@((p)=>$"{p.Name} - {p.Price}")"
              Placeholder="Busca"
              PreAdornment="@Features.Media.Icons.NjIcons.Materials.MaterialIconsRound.i_search"
              PostAdornment="@Features.Media.Icons.NjIcons.Materials.MaterialIconsRound.i_search"
              PreAdornmentColor="@NjColors.Blue.Darken1"
              PostAdornmentColor="@NjColors.DarkSeaGreen.Darken2">
    </NjSearch>

    <h2>NjSearch Only Contains</h2>
    <NjSearch SearchFuntion="(p, search)=>p.Name.Contains(search)"
              SourceData="@Source"
              DynamicSearch="true"
              TSearchObject="ProductSample"
              DisplayFunction="@((p)=>$"{p.Name} - {p.Price}")"
              Placeholder="Busca">
    </NjSearch>


    <h2>NjSearch Contains + LevenshteinDistance</h2>
    <NjSearch SearchFuntion="(p, search)=>
        p.Name.Contains(search)
        || SearchFilterAlgorithms.LevenshteinDistance(p.Name, search) <= MaxAllowedDistance(search)"
        SourceData="@Source"
        DynamicSearch="true"
        TSearchObject="ProductSample"
        DisplayFunction="@((p)=>$"{p.Name} - {p.Price}")"
        Placeholder="Busca">
    </NjSearch>

    <h2>NjSearch Contains + Fuzzy</h2>
    <NjSearch SearchFuntion="(p, search)=>
                            p.Name.Contains(search)
                            || SearchFilterAlgorithms.IsFuzzyMatch(p.Name, search)"
              SourceData="@Source"
              DynamicSearch="true"
              TSearchObject="ProductSample"
              DisplayFunction="@((p)=>$"{p.Name} - {p.Price}")"
              Placeholder="Busca">
    </NjSearch>

    <h2>NjSearch Contains + LevenshteinDistance + Fuzzy</h2>
    <NjSearch SearchFuntion="(p, search)=>
        p.Name.Contains(search)
        || SearchFilterAlgorithms.IsFuzzyMatch(p.Name, search)
        || SearchFilterAlgorithms.LevenshteinDistance(p.Name, search) <= MaxAllowedDistance(search)"
        SourceData="@Source"
        DynamicSearch="true"
        TSearchObject="ProductSample"
        DisplayFunction="@((p)=>$"{p.Name} - {p.Price}")"
        Placeholder="Busca">
    </NjSearch>
</div>

@code {

    private async Task DisabledClick(MouseEventArgs args)
    {
        var a = args;
    }

    private int MaxAllowedDistance(string search)
    {
        int[] distanceLookup = { 1, 2, 3 };
        return Math.Min(distanceLookup.Length - 1, (search.Length - 1) / 10);
    }
    private List<ProductSample> Source = new List<ProductSample>()
    {
        new(){Name="Product 1", Price=15.2f},
        new(){Name="Product 2", Price=15.2f},
        new(){Name="Product 3", Price=15.2f},
        new(){Name="Product 4", Price=15.2f},
        new(){Name="Product 5", Price=15.2f}
    };

    public class ProductSample
    {
        public string Name { get; set; }
        public float Price { get; set; }
    }
}

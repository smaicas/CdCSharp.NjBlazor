<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CdCSharp NjBlazor - Home" xml:space="preserve">
    <value>CdCSharp NjBlazor - Inicio</value>
  </data>
  <data name="Blazor Component Library" xml:space="preserve">
    <value>Librería de Componentes Blazor</value>
  </data>
  <data name="Elevate Your Blazor Experience" xml:space="preserve">
    <value>Eleva tu experiencia Blazor</value>
  </data>
  <data name="Maximize Productivity" xml:space="preserve">
    <value>Maximiza la productividad</value>
  </data>
  <data name="enjoy!" xml:space="preserve">
    <value>enjoy!</value>
  </data>
  <data name="Get Started" xml:space="preserve">
    <value>Comienza</value>
  </data>
  <data name="Why NJ Blazor?" xml:space="preserve">
    <value>¿Por qué NJ Blazor?</value>
  </data>
  <data name="Don't reinvent the wheel!" xml:space="preserve">
    <value>No reinventa la rueda</value>
  </data>
  <data name="Nj Blazor is built as extension of Blazor Web and Form Components." xml:space="preserve">
    <value>Nj Blazor está construido como una extensión de Blazor Web y Form Components.</value>
  </data>
  <data name="All you can do with Blazor you can do it with Nj Blazor." xml:space="preserve">
    <value>Todo lo que puedes hacer con Blazor lo puedes hacer con Nj Blazor.</value>
  </data>
  <data name="Lightweight and modular!" xml:space="preserve">
    <value>Ligero y modular</value>
  </data>
  <data name="One of the main objectives is performance." xml:space="preserve">
    <value>Uno de los principales objetivos es el rendimiento.</value>
  </data>
  <data name="Nj Blazor opts for a modular design, bundles and includes precompiled code generation mechanisms... Changes that positively affect performance will always be included in the roadmap." xml:space="preserve">
    <value>Nj Blazor opta por un diseño modular, agrupa e incluye mecanismos de generación de código precompilado... Los cambios que afecten positivamente al rendimiento siempre se incluirán en la hoja de ruta.</value>
  </data>
  <data name="Feature-Rich!" xml:space="preserve">
    <value>Multitud de características</value>
  </data>
  <data name="It includes all you need. It's thought for developers." xml:space="preserve">
    <value>Incluye todo lo necesario. Está pensado para desarrolladores.</value>
  </data>
  <data name="Colors, Icons, Themes..." xml:space="preserve">
    <value>Colores, Iconos, Temas</value>
  </data>
  <data name="Integrated localization and Markdown render" xml:space="preserve">
    <value>Integrada Localizacion, Renderizado de Markdown...</value>
  </data>
  <data name="Variety of customizable components, grid, tables... also form controls that works with native blazor features." xml:space="preserve">
    <value>Variedad de componentes personalizables, cuadrícula, tablas... también controles de formulario que funcionan con características nativas de blazor.</value>
  </data>
  <data name="Responsive management" xml:space="preserve">
    <value>Gestion de responsividad</value>
  </data>
  <data name="Work in progress!" xml:space="preserve">
    <value>Trabajo en progreso</value>
  </data>
  <data name="Nj Blazor will be evolving to be the robust framework you expect." xml:space="preserve">
    <value>Nj Blazor evolucionará para convertirse en el marco robusto que usted espera.</value>
  </data>
  <data name="Opensource!" xml:space="preserve">
    <value>¡Código abierto!</value>
  </data>
  <data name="It is distributed over GPL-3 license. So it can be used for every opensource project. If you desire to make private use of Nj Blazor " xml:space="preserve">
    <value>Se distribuye bajo licencia GPL-3, por lo que puede utilizarse en cualquier proyecto de código abierto. Si deseas hacer uso privado de Nj Blazor</value>
  </data>
</root>
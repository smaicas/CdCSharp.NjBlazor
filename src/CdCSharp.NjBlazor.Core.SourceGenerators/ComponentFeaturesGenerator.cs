using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;

public class ComponentFeaturesGenerator : IComponentCodeGenerator
{
    private static readonly string[] AttributeName = { "ComponentFeatures", "ComponentFeaturesAttribute" };

    public IncrementalValuesProvider<INamedTypeSymbol> ConfigureProvider(IncrementalGeneratorInitializationContext context)
    {
        return context.SyntaxProvider
            .CreateSyntaxProvider((node, ct) => IsClassWithComponentFeaturesAttribute(node, ct), TransformComponentFeatureSymbol)
            .Where(symbol => symbol != null)!;
    }

    private static bool IsClassWithComponentFeaturesAttribute(SyntaxNode syntaxNode, CancellationToken _)
    {
        if (syntaxNode is ClassDeclarationSyntax classDecl)
        {
            IEnumerable<string> attrs = classDecl.AttributeLists
                   .SelectMany(al => al.Attributes)
                   .Select(a => a.Name.ToString());

            if (AttributeName.Any(expected => attrs.Any(a => a.Contains(expected))))
            {
                return true;
            };
        }
        return false;
    }

    private static INamedTypeSymbol? TransformComponentFeatureSymbol(GeneratorSyntaxContext context, CancellationToken _)
    {
        if (context.Node is not ClassDeclarationSyntax classDecl) return null;

        SemanticModel semanticModel = context.SemanticModel;
        INamedTypeSymbol? classSymbol = semanticModel.GetDeclaredSymbol(classDecl) as INamedTypeSymbol;

        if (classSymbol == null) return null;

        AttributeData? componentFeaturesAttr = classSymbol.GetAttributes().FirstOrDefault(attr => attr.AttributeClass?.Name == "ComponentFeaturesAttribute");

        if (componentFeaturesAttr == null) return null;

        // Extraer los features del atributo
        IEnumerable<INamedTypeSymbol?> featureTypes = componentFeaturesAttr.ConstructorArguments
    .SelectMany(arg => arg.Values)
    .Select(value => value.Value as INamedTypeSymbol)
    .Where(type => type != null);

        return classSymbol;
    }

    public void Execute(GeneratorExecutionContext context)
    {
        foreach (INamedTypeSymbol classSymbol in context.Classes
                     .Where(t => t.TypeKind == TypeKind.Class))
        {
            GenerateClass(context, classSymbol);
        }
    }

    private void GenerateClass(GeneratorExecutionContext context, INamedTypeSymbol classSymbol)
    {
        IEnumerable<AttributeData> attributes = classSymbol.GetAttributes().Where(attr => attr.AttributeClass?.Name == "ComponentFeaturesAttribute");

        foreach (AttributeData? attr in attributes)
        {
            IEnumerable<INamedTypeSymbol?> featureTypes = attr.ConstructorArguments
               .SelectMany(arg => arg.Values)
               .Select(value => value.Value as INamedTypeSymbol)
               .Where(type => type != null);

            foreach (INamedTypeSymbol? featureType in featureTypes)
            {
                if (featureType == null || SymbolEqualityComparer.Default.Equals(featureType, classSymbol)) continue;

                INamedTypeSymbol? defaultImplementation = FindDefaultImplementation(context.Compilation, featureType);
                if (defaultImplementation == null) continue;

                ClassDeclarationSyntax? originalSyntax = classSymbol.DeclaringSyntaxReferences
                    .FirstOrDefault()?.GetSyntax() as ClassDeclarationSyntax;

                ClassDeclarationSyntax? featureSyntax = defaultImplementation.DeclaringSyntaxReferences
                    .FirstOrDefault()?.GetSyntax() as ClassDeclarationSyntax;

                if (originalSyntax == null || featureSyntax == null) continue;

                string namespaceName = classSymbol.ContainingNamespace.ToDisplayString();

                // Combinar los usings de ambas clases
                IEnumerable<string> combinedUsings = GetCombinedUsings(originalSyntax, featureSyntax);

                SyntaxTokenList modifiers = GetClassModifiers(originalSyntax);

                // Crear la nueva clase parcial
                ClassDeclarationSyntax classDeclaration = SyntaxFactory.ClassDeclaration(classSymbol.Name)
                    .WithModifiers(modifiers)
                    .WithBaseList(originalSyntax.BaseList)
                    .WithMembers(SyntaxFactory.List<MemberDeclarationSyntax>(
                        featureSyntax.Members.Where(m => !m.IsKind(SyntaxKind.ConstructorDeclaration))));

                // Generar el código fuente con los usings y la clase
                StringBuilder sourceBuilder = new();
                sourceBuilder.AppendLine("// <auto-generated/>");
                foreach (string @using in combinedUsings.OrderBy(u => u))
                {
                    sourceBuilder.AppendLine($"using {@using};");
                }
                sourceBuilder.AppendLine();
                sourceBuilder.AppendLine($"namespace {namespaceName};");
                sourceBuilder.AppendLine();
                sourceBuilder.AppendLine(classDeclaration.NormalizeWhitespace().ToFullString());

                // Agregar el archivo generado al contexto
                context.AddSource($"{classSymbol.Name}.{defaultImplementation.Name}.g.cs",
                    SourceText.From(sourceBuilder.ToString(), Encoding.UTF8));
            }
        }
    }

    private IEnumerable<string> GetCombinedUsings(ClassDeclarationSyntax originalSyntax, ClassDeclarationSyntax featureSyntax)
    {
        HashSet<string> usings = new(
            originalSyntax.SyntaxTree.GetCompilationUnitRoot().Usings.Select(u => u.Name.ToString()));

        foreach (string featureUsing in featureSyntax.SyntaxTree.GetCompilationUnitRoot().Usings.Select(u => u.Name.ToString()))
        {
            usings.Add(featureUsing);
        }

        usings.Add("CdCSharp.NjBlazor.Core");

        return usings;
    }

    private INamedTypeSymbol? FindDefaultImplementation(Compilation compilation, INamedTypeSymbol featureType)
    {
        string typeName = $"{featureType.ContainingNamespace.ToDisplayString()}.{featureType.Name}";
        INamedTypeSymbol? defaultImpl = compilation.GetTypeByMetadataName(typeName);
        return defaultImpl;
        //return defaultImpl != null && defaultImpl.AllInterfaces
        //    .Any(i => i.Name == "IComponentFeature" &&
        //              i.TypeArguments.Length == 1 &&
        //              SymbolEqualityComparer.Default.Equals(i.TypeArguments[0], defaultImpl))
        //    ? defaultImpl
        //    : null;
    }

    private SyntaxTokenList GetClassModifiers(ClassDeclarationSyntax originalClass)
    {
        List<SyntaxToken> modifiers = originalClass.Modifiers
            .Where(m => !m.IsKind(SyntaxKind.PartialKeyword))
            .ToList();

        if (!modifiers.Any(m => m.IsKind(SyntaxKind.PublicKeyword)))
        {
            modifiers.Insert(0, SyntaxFactory.Token(SyntaxKind.PublicKeyword));
        }

        modifiers.Add(SyntaxFactory.Token(SyntaxKind.PartialKeyword));
        return SyntaxFactory.TokenList(modifiers);
    }
}
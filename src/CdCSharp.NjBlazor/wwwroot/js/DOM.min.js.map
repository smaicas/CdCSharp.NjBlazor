{"version":3,"file":"DOM.min.js","sources":["../../Types/DOM/DOMJs.ts"],"sourcesContent":["export function Load(): void {\r\n    window['DOMJs'] = new DOMModule.DOMJsClass();\r\n}\r\n\r\nexport module DOMModule {\r\n    export class DOMJsClass {\r\n        constructor() {\r\n        }\r\n\r\n        public async SetCssVariable(variableName: string, value: string): Promise<void> {\r\n            document.documentElement.style.setProperty(variableName, value);\r\n        };\r\n\r\n        public async GetCssVariable(variableName: string): Promise<string> {\r\n            const rootStyles = getComputedStyle(document.documentElement);\r\n            return rootStyles.getPropertyValue(variableName);\r\n        }\r\n\r\n        public async SaveLocalStorage(key: string, value: string): Promise<void> {\r\n            localStorage.setItem(key, value);\r\n        }\r\n\r\n        public async GetLocalStorage(key: string): Promise<string> {\r\n            return localStorage.getItem(key);\r\n        }\r\n\r\n        public async SelectText(element: HTMLDivElement): Promise<void> {\r\n            const range = document.createRange();\r\n            range.selectNodeContents(element);\r\n            const selection = window.getSelection();\r\n            selection.removeAllRanges();\r\n            selection.addRange(range);\r\n        }\r\n\r\n        public async GetCoordsRelative(\r\n            relativeToElement: HTMLElement,\r\n            positioning: string): Promise<Array<number>> {\r\n            let result = [0, 0, 0, 0];\r\n\r\n            const height = relativeToElement.getBoundingClientRect().height;\r\n            const width = relativeToElement.getBoundingClientRect().width;\r\n\r\n            switch (positioning) {\r\n                case \"center\":\r\n                    return [0, 0, 0, 0];\r\n\r\n                case \"top\":\r\n                    return [0, 0, height, 0];\r\n\r\n                case \"right\":\r\n                    return [0, 0, 0, width];\r\n\r\n                case \"bottom\":\r\n                    return [height, 0, 0, 0];\r\n\r\n                case \"left\":\r\n                    return [0, width, 0, 0];\r\n\r\n                case \"topleft\":\r\n                    return [0, width, height, 0];\r\n\r\n                case \"topright\":\r\n                    return [0, 0, height, width];\r\n\r\n                case \"bottomleft\":\r\n                    return [height, width, 0, 0];\r\n\r\n                case \"bottomright\":\r\n                    return [height, 0, 0, width];\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        public async GetElementBounds(\r\n            elementQuery: string): Promise<Array<number>> {\r\n            const element = document.querySelector(elementQuery);\r\n\r\n            if (!element) return [0, 0];\r\n\r\n            const rect = element.getBoundingClientRect();\r\n\r\n            const height = rect.height;\r\n            const width = rect.width;\r\n\r\n            return [width, height];\r\n        }\r\n\r\n        public async SetCalendarDatepickerValue(calendarInputRef: HTMLInputElement, value: string): Promise<void> {\r\n            if (!calendarInputRef) return;\r\n\r\n            calendarInputRef.value = value;\r\n        }\r\n\r\n        public async AddShowPickerEventHandler(clickElement: HTMLElement, inputCalendarElement: HTMLInputElement): Promise<void> {\r\n            if (clickElement.dataset.showPickerListenerAttached === \"true\") {\r\n                return;\r\n            }\r\n            clickElement.dataset.showPickerListenerAttached = \"true\";\r\n            clickElement.addEventListener(\"click\", () => {\r\n                if (inputCalendarElement.showPicker) {\r\n                    inputCalendarElement.showPicker();\r\n                }\r\n            });\r\n        }\r\n\r\n        textPatternClickEvents = new WeakMap<HTMLSpanElement, EventListener>();\r\n        textPatternInputEvents = new WeakMap<HTMLSpanElement, EventListener>();\r\n        textPatternBlurEvents = new WeakMap<HTMLSpanElement, EventListener>();\r\n        public async TextPatternAddDynamic(containerBox: HTMLDivElement, elements: Array<ElementPattern>): Promise<void> {\r\n            containerBox.innerHTML = '';\r\n            this.textPatternClickEvents = new WeakMap<HTMLSpanElement, EventListener>();\r\n            this.textPatternInputEvents = new WeakMap<HTMLSpanElement, EventListener>();\r\n            this.textPatternBlurEvents = new WeakMap<HTMLSpanElement, EventListener>();\r\n\r\n            for (let element of elements) {\r\n                let span = document.createElement('span');\r\n                span.innerText = element.value;\r\n\r\n                if (element.isSeparator) {\r\n                    containerBox.appendChild(span);\r\n                    continue;\r\n                }\r\n\r\n                if (element.isEditable) {\r\n                    span.setAttribute('contenteditable', 'true');\r\n                    this.addTextPatternEvents(span, containerBox, element);\r\n                }\r\n                containerBox.appendChild(span);\r\n            }\r\n        }\r\n\r\n        private addTextPatternEvents = (span: HTMLSpanElement,\r\n            containerBox: HTMLDivElement,\r\n            elementPattern: ElementPattern) => {\r\n            const selectTextOnClick = () => this.selectTextOnClick(span);\r\n            if (!this.textPatternClickEvents.get(span)) {\r\n                span.addEventListener(\"click\", selectTextOnClick);\r\n                this.textPatternClickEvents.set(span, selectTextOnClick);\r\n            }\r\n\r\n            const goNextOrPrevent = () => this.goNextOrPrevent(span, containerBox, elementPattern);\r\n            if (!this.textPatternInputEvents.get(span)) {\r\n                span.addEventListener(\"input\", goNextOrPrevent);\r\n                this.textPatternInputEvents.set(span, goNextOrPrevent);\r\n            }\r\n\r\n            const setDefaultValueNotLength = () => this.setDefaultValueNotLength(span, elementPattern);\r\n            if (!this.textPatternBlurEvents.get(span)) {\r\n                span.addEventListener(\"blur\", setDefaultValueNotLength);\r\n                this.textPatternBlurEvents.set(span, setDefaultValueNotLength);\r\n            }\r\n        }\r\n        private selectTextOnClick = (span: HTMLSpanElement) => {\r\n            const range = document.createRange();\r\n            range.selectNodeContents(span);\r\n            const selection = window.getSelection();\r\n            selection.removeAllRanges();\r\n            selection.addRange(range);\r\n        };\r\n\r\n        private goNextOrPrevent = (span: HTMLSpanElement, containerBox: HTMLDivElement, elementPattern: ElementPattern) => {\r\n            if (span.innerText.length == 0) {\r\n                span.innerText = elementPattern.defaultValue;\r\n                return;\r\n            }\r\n\r\n            if (span.innerText.length <= elementPattern.length) {\r\n                let cursor = this.getCursorPositionWithinSpan(span);\r\n                let flattenedPattern = elementPattern.pattern\r\n                    .replace(/[\\\\\\(\\)\\^\\$]/g, \"\");\r\n                let text = span.innerText;\r\n                let splittedPattern = flattenedPattern.substring(0, text.length).split('');\r\n\r\n                let validText = '';\r\n                for (let chIndex = 0; chIndex < text.length; chIndex++) {\r\n                    let valid;\r\n                    if (splittedPattern[chIndex] === 'w') {\r\n                        valid = new RegExp('[a-zA-Z]', 'g').test(text[chIndex]);\r\n                    }\r\n                    else if (splittedPattern[chIndex] === 'd') {\r\n                        valid = new RegExp('[0-9]', 'g').test(text[chIndex]);\r\n                    }\r\n                    if (valid) {\r\n                        validText += text[chIndex];\r\n                    } else {\r\n                        cursor = cursor - 1;\r\n                    }\r\n                }\r\n                span.innerText = validText;\r\n                this.setCursorPositionWithinSpan(span, cursor);\r\n\r\n                if (span.innerText.length >= elementPattern.length) {\r\n                    const nextBlock = this.findNextEditableBlock(containerBox, span);\r\n                    if (nextBlock) {\r\n                        nextBlock.click();\r\n                    }\r\n                }\r\n            } else {\r\n                span.innerText = span.innerText.substring(0, elementPattern.length);\r\n                this.placeCaretAtEnd(span);\r\n            }\r\n        };\r\n\r\n        private setDefaultValueNotLength = (span: HTMLSpanElement, elementPattern: ElementPattern) => {\r\n            if (span.innerText.length != elementPattern.length) {\r\n                span.innerText = elementPattern.defaultValue;\r\n                return;\r\n            }\r\n        }\r\n\r\n        private getCursorPositionWithinSpan = (spanElement: HTMLElement): number => {\r\n            let cursorPosition = 0;\r\n\r\n            if (window.getSelection) {\r\n                let selection = window.getSelection();\r\n                if (selection && selection.rangeCount > 0) {\r\n                    let range = selection.getRangeAt(0);\r\n                    let preSelectionRange = range.cloneRange();\r\n                    preSelectionRange.selectNodeContents(spanElement);\r\n                    preSelectionRange.setEnd(range.startContainer, range.startOffset);\r\n                    cursorPosition = preSelectionRange.toString().length;\r\n                }\r\n            }\r\n\r\n            return cursorPosition;\r\n        }\r\n\r\n        private setCursorPositionWithinSpan = (spanElement: HTMLElement, position: number): void => {\r\n            let range = document.createRange();\r\n            let selection = window.getSelection();\r\n\r\n            if (selection) {\r\n                range.setStart(spanElement.childNodes[0] || spanElement, position);\r\n                range.collapse(true);\r\n                selection.removeAllRanges();\r\n                selection.addRange(range);\r\n            }\r\n        }\r\n        private findNextEditableBlock = (containerBox: HTMLDivElement, current: HTMLSpanElement): HTMLElement | null => {\r\n            let foundCurrent = false;\r\n            for (const child of containerBox.children) {\r\n                if (child === current) {\r\n                    foundCurrent = true;\r\n                } else if (foundCurrent && child instanceof HTMLSpanElement && child.contentEditable === \"true\") {\r\n                    return child;\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n\r\n        private placeCaretAtEnd = (el: HTMLElement) => {\r\n            const range = document.createRange();\r\n            const selection = window.getSelection();\r\n\r\n            range.selectNodeContents(el);\r\n            range.collapse(false);\r\n\r\n            if (selection) {\r\n                selection.removeAllRanges();\r\n                selection.addRange(range);\r\n            }\r\n        }\r\n\r\n        public async FocusElement(querySelector: string, parentElement?: HTMLElement | null): Promise<void> {\r\n            console.log(\"Focused\")\r\n            if (parentElement) {\r\n                (parentElement.querySelector(querySelector) as HTMLElement)?.focus();\r\n            } else {\r\n                (document.querySelector(querySelector) as HTMLElement)?.focus();\r\n            }\r\n        }\r\n\r\n        public async GetFocusedElementClass(): Promise<string> {\r\n            const focusedElement = document.activeElement;\r\n            return focusedElement.classList.toString()\r\n        }\r\n\r\n        inputFileHandlers = new WeakMap<Element, EventListener>();\r\n        public async InputFileInitializeCallbacks(dotNetRef: any, elementRef: HTMLInputElement): Promise<void> {\r\n            if (this.inputFileHandlers.get(elementRef)) return;\r\n\r\n            const fileChangeHandler = (event: InputEvent) => {\r\n                const files: FileList | null = elementRef.files;\r\n                if (files) {\r\n                    let sendFiles: IBrowserFile[] = [];\r\n                    for (let i = 0; i < files.length; i++) {\r\n                        let f = files.item(i);\r\n                        sendFiles.push({\r\n                            id: i,\r\n                            name: f.name,\r\n                            size: f.size,\r\n                            contentType: f.type,\r\n                            lastModified: new Date(f.lastModified).toISOString(),\r\n                        });\r\n                    }\r\n                    dotNetRef.invokeMethodAsync(\"NotifyChange\", sendFiles);\r\n                };\r\n            };\r\n\r\n            elementRef.addEventListener('change', fileChangeHandler);\r\n\r\n            this.inputFileHandlers.set(elementRef, fileChangeHandler);\r\n        }\r\n\r\n        public async ReadFileData(elementRef: HTMLInputElement, fileId: number): Promise<ArrayBuffer> {\r\n            const file = elementRef.files.item(fileId);\r\n            const fileData = await this.readFileStreamAsync(file);\r\n            return fileData;\r\n        }\r\n\r\n        public async ReadImageData(elementRef: HTMLInputElement, fileId: number): Promise<string> {\r\n            const file = elementRef.files.item(fileId);\r\n            const fileData = await this.readFileDataAsync(file);\r\n            return fileData;\r\n        }\r\n\r\n        private async readFileDataAsync(file: File): Promise<string> {\r\n            return new Promise<string>((resolve, reject) => {\r\n                const reader = new FileReader();\r\n                reader.onload = () => {\r\n                    resolve(reader.result as string);\r\n                };\r\n                reader.onerror = (error) => {\r\n                    reject(error);\r\n                };\r\n                reader.readAsDataURL(file);\r\n            });\r\n        }\r\n\r\n        private async readFileStreamAsync(file: File): Promise<ArrayBuffer> {\r\n            return new Promise<ArrayBuffer>((resolve, reject) => {\r\n                const reader = new FileReader();\r\n                reader.onload = () => {\r\n                    resolve(reader.result as ArrayBuffer);\r\n                };\r\n                reader.onerror = (error) => {\r\n                    reject(error);\r\n                };\r\n                reader.readAsArrayBuffer(file);\r\n            });\r\n        }\r\n\r\n        public async SetDisabled(element: HTMLInputElement, value: boolean): Promise<void> {\r\n            element.disabled = value;\r\n        }\r\n\r\n        // Scroll to the closest element based on query selector\r\n        public async ScrollToClosest(querySelector: string, element?: HTMLElement | null): Promise<void> {\r\n            let closest: HTMLElement | null = null;\r\n\r\n            if (element) {\r\n                closest = element.matches(querySelector) ? element : element.closest(querySelector);\r\n            } else {\r\n                closest = document.querySelector(querySelector) as HTMLElement | null;\r\n            }\r\n\r\n            if (closest) {\r\n                const rect = closest.getBoundingClientRect();\r\n                const offsetTop = rect.top + window.scrollY;\r\n\r\n                window.scrollTo({ top: offsetTop, behavior: 'smooth' });\r\n            }\r\n        }\r\n\r\n        // Scroll to the top of the specified element or document\r\n        public async ScrollTop(parentElement?: HTMLElement | null, position?: number): Promise<void> {\r\n            position ??= 0;\r\n\r\n            if (parentElement) {\r\n                const rect = parentElement.getBoundingClientRect();\r\n                const offsetTop = rect.top + window.scrollY;\r\n                window.scrollTo({ top: offsetTop + position, behavior: 'smooth' });\r\n            } else {\r\n                window.scrollTo({ top: position, behavior: 'smooth' });\r\n            }\r\n        }\r\n\r\n        public async DownloadFile(filename: string,\r\n            content: string,\r\n            contentType: string = 'text/plain')\r\n            : Promise<void> {\r\n            const blob: Blob = new Blob([content], { type: contentType });\r\n            const url: string = window.URL.createObjectURL(blob);\r\n            const a: HTMLAnchorElement = document.createElement('a');\r\n            a.href = url;\r\n            a.download = filename;\r\n            document.body.appendChild(a);\r\n            a.click();\r\n            window.URL.revokeObjectURL(url);\r\n            document.body.removeChild(a);\r\n        }\r\n    }\r\n}\r\ninterface ICssVariable {\r\n    Name: string;\r\n    Value: string;\r\n    FullName: string;\r\n    Prefix: string;\r\n}\r\ninterface IBrowserFile {\r\n    id: number;\r\n    name: string;\r\n    size: number;\r\n    contentType: string;\r\n    lastModified: string;\r\n}\r\n\r\ninterface ElementPattern {\r\n    pattern: string;\r\n    value: string;\r\n    length: number;\r\n    defaultValue: string;\r\n    isSeparator: boolean;\r\n    isEditable: boolean;\r\n}\r\n\r\nexport class CssVariable implements ICssVariable {\r\n    Name: string;\r\n    Value: string;\r\n    FullName: string;\r\n    Prefix: string;\r\n\r\n    constructor(data: ICssVariable) {\r\n        this.Name = data.Name;\r\n        this.Value = data.Value;\r\n        this.FullName = data.FullName;\r\n        this.Prefix = data.Prefix;\r\n    }\r\n\r\n    static fromJsonArray(jsonArray: any[]): CssVariable[] {\r\n        return jsonArray.map((jsonObject) => new CssVariable(jsonObject));\r\n    }\r\n}\r\n\r\nLoad();"],"names":["DOMModule","DOMJsClass","constructor","this","textPatternClickEvents","WeakMap","textPatternInputEvents","textPatternBlurEvents","addTextPatternEvents","span","containerBox","elementPattern","selectTextOnClick","get","addEventListener","set","goNextOrPrevent","setDefaultValueNotLength","range","document","createRange","selectNodeContents","selection","window","getSelection","removeAllRanges","addRange","innerText","length","cursor","getCursorPositionWithinSpan","flattenedPattern","pattern","replace","text","splittedPattern","substring","split","validText","chIndex","valid","RegExp","test","setCursorPositionWithinSpan","nextBlock","findNextEditableBlock","click","placeCaretAtEnd","defaultValue","spanElement","cursorPosition","rangeCount","getRangeAt","preSelectionRange","cloneRange","setEnd","startContainer","startOffset","toString","position","setStart","childNodes","collapse","current","foundCurrent","child","children","HTMLSpanElement","contentEditable","el","inputFileHandlers","SetCssVariable","variableName","value","documentElement","style","setProperty","GetCssVariable","getComputedStyle","getPropertyValue","SaveLocalStorage","key","localStorage","setItem","GetLocalStorage","getItem","SelectText","element","GetCoordsRelative","relativeToElement","positioning","height","getBoundingClientRect","width","GetElementBounds","elementQuery","querySelector","rect","SetCalendarDatepickerValue","calendarInputRef","AddShowPickerEventHandler","clickElement","inputCalendarElement","dataset","showPickerListenerAttached","showPicker","TextPatternAddDynamic","elements","innerHTML","createElement","isSeparator","isEditable","setAttribute","appendChild","FocusElement","parentElement","focus","GetFocusedElementClass","activeElement","classList","InputFileInitializeCallbacks","dotNetRef","elementRef","fileChangeHandler","event","files","sendFiles","i","f","item","push","id","name","size","contentType","type","lastModified","Date","toISOString","invokeMethodAsync","ReadFileData","fileId","file","readFileStreamAsync","ReadImageData","readFileDataAsync","Promise","resolve","reject","reader","FileReader","onload","result","onerror","error","readAsDataURL","readAsArrayBuffer","SetDisabled","disabled","ScrollToClosest","closest","matches","offsetTop","top","scrollY","scrollTo","behavior","ScrollTop","DownloadFile","filename","content","blob","Blob","url","URL","createObjectURL","a","href","download","body","revokeObjectURL","removeChild"],"mappings":"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"}
{"version":3,"file":"TextPattern.min.js","sources":["../../Types/TextPattern/TextPatternJs.ts"],"sourcesContent":["export function Load(): void {\r\n    window['TextPatternJs'] = new TextPatternModule.TextPatternJsClass();\r\n}\r\n\r\nexport module TextPatternModule {\r\n    export class TextPatternJsClass {\r\n        constructor() {\r\n        }\r\n\r\n        textPatternClickEvents = new WeakMap<HTMLSpanElement, EventListener>();\r\n        textPatternInputEvents = new WeakMap<HTMLSpanElement, EventListener>();\r\n        textPatternBlurEvents = new WeakMap<HTMLSpanElement, EventListener>();\r\n        public async TextPatternAddDynamic(\r\n            containerBox: HTMLDivElement,\r\n            elements: Array<ElementPattern>,\r\n            dotnet: any,\r\n            dotnetNotifyChangeTextCallback: string,\r\n            dotnetValidatePartialCallback: string): Promise<void> {\r\n            if (!containerBox.appendChild) { return; }\r\n\r\n            containerBox.innerHTML = '';\r\n            this.textPatternClickEvents = new WeakMap<HTMLSpanElement, EventListener>();\r\n            this.textPatternInputEvents = new WeakMap<HTMLSpanElement, EventListener>();\r\n            this.textPatternBlurEvents = new WeakMap<HTMLSpanElement, EventListener>();\r\n\r\n            for (let index: number = 0; index < elements.length; index++) {\r\n                let element: ElementPattern = elements[index];\r\n                let span: HTMLSpanElement = document.createElement('span');\r\n\r\n                span.innerText = element.value;\r\n                if (element.isSeparator) {\r\n                    containerBox.appendChild(span);\r\n                    continue;\r\n                }\r\n\r\n                if (element.isEditable) {\r\n                    span.setAttribute('contenteditable', 'true');\r\n                    this.addTextPatternEvents(span, index, containerBox, element, dotnet, dotnetNotifyChangeTextCallback, dotnetValidatePartialCallback);\r\n                }\r\n                containerBox.appendChild(span);\r\n            }\r\n        }\r\n\r\n        private addTextPatternEvents = (\r\n            span: HTMLSpanElement,\r\n            index: number,\r\n            containerBox: HTMLDivElement,\r\n            elementPattern: ElementPattern,\r\n            dotnet: any,\r\n            dotnetNotifyChangeTextCallback: string,\r\n            dotnetValidatePartialCallback: string) => {\r\n            const selectTextOnClick = () => this.selectTextOnClick(span);\r\n            if (!this.textPatternClickEvents.get(span)) {\r\n                span.addEventListener(\"click\", selectTextOnClick);\r\n                this.textPatternClickEvents.set(span, selectTextOnClick);\r\n            }\r\n\r\n            const goNextOrPrevent = () =>\r\n                this.goNextOrPrevent(\r\n                    span,\r\n                    index,\r\n                    containerBox,\r\n                    elementPattern,\r\n                    dotnet,\r\n                    dotnetNotifyChangeTextCallback,\r\n                    dotnetValidatePartialCallback);\r\n            if (!this.textPatternInputEvents.get(span)) {\r\n                span.addEventListener(\"input\", goNextOrPrevent);\r\n                this.textPatternInputEvents.set(span, goNextOrPrevent);\r\n            }\r\n\r\n            const setDefaultValueNotLength = () => this.setDefaultValueNotLength(span, elementPattern);\r\n            if (!this.textPatternBlurEvents.get(span)) {\r\n                span.addEventListener(\"blur\", setDefaultValueNotLength);\r\n                this.textPatternBlurEvents.set(span, setDefaultValueNotLength);\r\n            }\r\n        }\r\n        private selectTextOnClick = (span: HTMLSpanElement) => {\r\n            const range = document.createRange();\r\n            range.selectNodeContents(span);\r\n            const selection = window.getSelection();\r\n            selection.removeAllRanges();\r\n            selection.addRange(range);\r\n        };\r\n\r\n        private goNextOrPrevent = (\r\n            span: HTMLSpanElement,\r\n            index: number,\r\n            containerBox: HTMLDivElement,\r\n            elementPattern: ElementPattern,\r\n            dotnet: any,\r\n            dotnetCallback: string,\r\n            dotnetValidatePartialCallback: string) => {\r\n            console.log(containerBox.innerHTML);\r\n\r\n            if (span.innerText.length == 0) {\r\n                span.innerText = elementPattern.defaultValue;\r\n                if (dotnet) {\r\n                    dotnet.invokeMethodAsync(dotnetCallback, containerBox.innerText);\r\n                }\r\n                return;\r\n            }\r\n\r\n            if (span.innerText.length <= elementPattern.length) {\r\n                let cursor = this.getCursorPositionWithinSpan(span);\r\n                let flattenedPattern = elementPattern.pattern\r\n                    .replace(/[\\\\\\(\\)\\^\\$]/g, \"\");\r\n                let text = span.innerText;\r\n                let splittedPattern = flattenedPattern.substring(0, text.length).split('');\r\n\r\n                let validText = '';\r\n                for (let chIndex = 0; chIndex < text.length; chIndex++) {\r\n                    let valid;\r\n                    if (splittedPattern[chIndex] === 'w') {\r\n                        valid = new RegExp('[a-zA-Z]', 'g').test(text[chIndex]);\r\n                    }\r\n                    else if (splittedPattern[chIndex] === 'd') {\r\n                        valid = new RegExp('[0-9]', 'g').test(text[chIndex]);\r\n                    }\r\n                    if (valid) {\r\n                        validText += text[chIndex];\r\n                    } else {\r\n                        cursor = cursor - 1;\r\n                    }\r\n                }\r\n                span.innerText = validText;\r\n                this.setCursorPositionWithinSpan(span, cursor);\r\n\r\n                if (span.innerText.length >= elementPattern.length) {\r\n                    const nextBlock = this.findNextEditableBlock(containerBox, span);\r\n                    if (nextBlock) {\r\n                        nextBlock.click();\r\n                    }\r\n                }\r\n                if (dotnet) {\r\n                    dotnet.invokeMethodAsync(dotnetCallback, containerBox.innerText);\r\n                }\r\n\r\n                if (span.innerText.length === elementPattern.length) {\r\n                    dotnet.invokeMethodAsync(dotnetValidatePartialCallback, index, span.innerText).then(valid => {\r\n                        if (!valid) {\r\n                            span.innerText = elementPattern.defaultValue;\r\n                        }\r\n                    });\r\n                }\r\n            } else {\r\n                span.innerText = span.innerText.substring(0, elementPattern.length);\r\n                this.placeCaretAtEnd(span);\r\n                if (dotnet) {\r\n                    dotnet.invokeMethodAsync(dotnetCallback, containerBox.innerText);\r\n                }\r\n            }\r\n        };\r\n\r\n        private setDefaultValueNotLength = (span: HTMLSpanElement, elementPattern: ElementPattern) => {\r\n            if (span.innerText.length != elementPattern.length) {\r\n                span.innerText = elementPattern.defaultValue;\r\n                return;\r\n            }\r\n        }\r\n\r\n        private getCursorPositionWithinSpan = (spanElement: HTMLElement): number => {\r\n            let cursorPosition = 0;\r\n\r\n            if (window.getSelection) {\r\n                let selection = window.getSelection();\r\n                if (selection && selection.rangeCount > 0) {\r\n                    let range = selection.getRangeAt(0);\r\n                    let preSelectionRange = range.cloneRange();\r\n                    preSelectionRange.selectNodeContents(spanElement);\r\n                    preSelectionRange.setEnd(range.startContainer, range.startOffset);\r\n                    cursorPosition = preSelectionRange.toString().length;\r\n                }\r\n            }\r\n\r\n            return cursorPosition;\r\n        }\r\n\r\n        private setCursorPositionWithinSpan = (spanElement: HTMLElement, position: number): void => {\r\n            let range = document.createRange();\r\n            let selection = window.getSelection();\r\n\r\n            if (selection) {\r\n                range.setStart(spanElement.childNodes[0] || spanElement, position);\r\n                range.collapse(true);\r\n                selection.removeAllRanges();\r\n                selection.addRange(range);\r\n            }\r\n        }\r\n        private findNextEditableBlock = (containerBox: HTMLDivElement, current: HTMLSpanElement): HTMLElement | null => {\r\n            let foundCurrent = false;\r\n            for (const child of containerBox.children) {\r\n                if (child === current) {\r\n                    foundCurrent = true;\r\n                } else if (foundCurrent && child instanceof HTMLSpanElement && child.contentEditable === \"true\") {\r\n                    return child;\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n\r\n        private placeCaretAtEnd = (el: HTMLElement) => {\r\n            const range = document.createRange();\r\n            const selection = window.getSelection();\r\n\r\n            range.selectNodeContents(el);\r\n            range.collapse(false);\r\n\r\n            if (selection) {\r\n                selection.removeAllRanges();\r\n                selection.addRange(range);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ElementPattern {\r\n    pattern: string;\r\n    value: string;\r\n    length: number;\r\n    defaultValue: string;\r\n    isSeparator: boolean;\r\n    isEditable: boolean;\r\n}\r\n\r\nLoad();"],"names":["TextPatternModule","TextPatternJsClass","constructor","this","textPatternClickEvents","WeakMap","textPatternInputEvents","textPatternBlurEvents","addTextPatternEvents","span","index","containerBox","elementPattern","dotnet","dotnetNotifyChangeTextCallback","dotnetValidatePartialCallback","selectTextOnClick","get","addEventListener","set","goNextOrPrevent","setDefaultValueNotLength","range","document","createRange","selectNodeContents","selection","window","getSelection","removeAllRanges","addRange","dotnetCallback","innerText","length","defaultValue","invokeMethodAsync","cursor","getCursorPositionWithinSpan","flattenedPattern","pattern","replace","text","splittedPattern","substring","split","validText","chIndex","valid","RegExp","test","setCursorPositionWithinSpan","nextBlock","findNextEditableBlock","click","then","placeCaretAtEnd","spanElement","cursorPosition","rangeCount","getRangeAt","preSelectionRange","cloneRange","setEnd","startContainer","startOffset","toString","position","setStart","childNodes","collapse","current","foundCurrent","child","children","HTMLSpanElement","contentEditable","el","TextPatternAddDynamic","elements","appendChild","innerHTML","element","createElement","value","isSeparator","isEditable","setAttribute"],"mappings":"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"}
{"version":3,"file":"Audio.min.js","sources":["../../Types/Audio/AudioJs.ts"],"sourcesContent":["export function Load(): void {\r\n    window['AudioJs'] = new AudioJsModule.AudioJsClass();\r\n}\r\n\r\nexport module AudioJsModule {\r\n    export class AudioJsClass {\r\n        constructor() {\r\n        }\r\n\r\n        private _recorder: INjRecorder;\r\n        private _audio: INjAudio;\r\n        private _currentStream: MediaStream;\r\n\r\n        private _audioMimeType = \"audio/mpeg\";\r\n        private _audioBitsPerSecond = 256000;\r\n        private RecordAudio(): Promise<INjRecorder> {\r\n            return new Promise(\r\n                async resolve => {\r\n                    this._currentStream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n\r\n                    const options = {\r\n                        audioBitsPerSecond: this._audioBitsPerSecond,\r\n                        //videoBitsPerSecond: 2500000,\r\n                        mimeType: this._audioMimeType,\r\n                    };\r\n\r\n                    const mediaRecorder = new MediaRecorder(this._currentStream);\r\n                    let audioChunks = [];\r\n\r\n                    mediaRecorder.addEventListener('dataavailable', event => {\r\n                        audioChunks.push(event.data);\r\n                    });\r\n\r\n                    const start = () => {\r\n                        audioChunks = [];\r\n                        mediaRecorder.start();\r\n                    };\r\n\r\n                    const stop = () =>\r\n                        new Promise<INjAudio>(resolve => {\r\n                            mediaRecorder.addEventListener('stop', () => {\r\n                                const audioBlob = new Blob(audioChunks, { type: this._audioMimeType });\r\n                                const audioUrl = URL.createObjectURL(audioBlob);\r\n                                const audio = new Audio(audioUrl);\r\n\r\n                                const play = () => audio.play();\r\n                                resolve({ audioChunks, audioBlob, audioUrl, play });\r\n                            });\r\n\r\n                            mediaRecorder.stop();\r\n                        });\r\n\r\n                    resolve({ start, stop });\r\n                });\r\n        }\r\n\r\n        public async StartRecording(): Promise<void> {\r\n            if (!this._recorder) {\r\n                this._recorder = await this.RecordAudio();\r\n            }\r\n            this._recorder.start();\r\n        }\r\n\r\n        public async StopRecording(): Promise<any> {\r\n            this._audio = await this._recorder.stop();\r\n            return this._audio;\r\n        }\r\n\r\n        public async SetAudioSource(element: HTMLAudioElement): Promise<string> {\r\n            element.src = this._audio.audioUrl;\r\n            return this._audio.audioUrl;\r\n        }\r\n        public async VisualizeCanvas(canvasElement: HTMLCanvasElement): Promise<void> {\r\n            let stream = this._currentStream;\r\n\r\n            const canvasCtx = canvasElement.getContext(\"2d\");\r\n            let audioCtx = new AudioContext();\r\n            //canvasElement.style.backgroundColor\r\n            const source = audioCtx.createMediaStreamSource(stream);\r\n\r\n            const analyser = audioCtx.createAnalyser();\r\n            analyser.fftSize = 2048;\r\n            const bufferLength = analyser.frequencyBinCount;\r\n            const dataArray = new Uint8Array(bufferLength);\r\n\r\n            source.connect(analyser);\r\n            //analyser.connect(audioCtx.destination);\r\n\r\n            draw()\r\n\r\n            function draw() {\r\n                const WIDTH = canvasElement.width\r\n                const HEIGHT = canvasElement.height;\r\n\r\n                requestAnimationFrame(draw);\r\n\r\n                analyser.getByteTimeDomainData(dataArray);\r\n                // Retrieve real background color of canvas to apply for canvas fill.\r\n                // Required to apply canvas color from element class. Use class=\"bg-whatever\" to apply\r\n                // color to canvas. Default color white if not specified.\r\n                let canvasBgColor = getComputedStyle(canvasElement).getPropertyValue('background-color')\r\n                canvasCtx.fillStyle = canvasBgColor || 'rgb(255,255,255)';\r\n                canvasCtx.fillRect(0, 0, WIDTH, HEIGHT);\r\n\r\n                canvasCtx.lineWidth = 2;\r\n                canvasCtx.strokeStyle = 'rgb(0, 0, 0)';\r\n\r\n                canvasCtx.beginPath();\r\n\r\n                let sliceWidth = WIDTH * 1.0 / bufferLength;\r\n                let x = 0;\r\n\r\n                for (let i = 0; i < bufferLength; i++) {\r\n                    let v = dataArray[i] / 128.0;\r\n                    let y = v * HEIGHT / 2;\r\n\r\n                    if (i === 0) {\r\n                        canvasCtx.moveTo(x, y);\r\n                    } else {\r\n                        canvasCtx.lineTo(x, y);\r\n                    }\r\n\r\n                    x += sliceWidth;\r\n                }\r\n\r\n                canvasCtx.lineTo(canvasElement.width, canvasElement.height / 2);\r\n                canvasCtx.stroke();\r\n            }\r\n        }\r\n    }\r\n    export interface INjAudio {\r\n        audioChunks: any[];\r\n        audioBlob: Blob;\r\n        audioUrl: string;\r\n        play(): void;\r\n    }\r\n    export interface INjRecorder {\r\n        start(): void;\r\n        stop(): Promise<INjAudio>\r\n    }\r\n    export function getCSS(element) {\r\n        var css_data = '';\r\n        var css_obj = getComputedStyle(element);\r\n\r\n        for (var i = 0; i < css_obj.length; i++) {\r\n            css_data +=\r\n                css_obj[i] + ':' +\r\n                css_obj.getPropertyValue(css_obj[i])\r\n                + ';<br>';\r\n        }\r\n        return css_data;\r\n    }\r\n}\r\n\r\nLoad();"],"names":["AudioJsModule","AudioJsClass","constructor","this","_audioMimeType","_audioBitsPerSecond","RecordAudio","Promise","async","resolve","_currentStream","navigator","mediaDevices","getUserMedia","audio","mediaRecorder","MediaRecorder","audioChunks","addEventListener","event","push","data","start","stop","audioBlob","Blob","type","audioUrl","URL","createObjectURL","Audio","play","StartRecording","_recorder","StopRecording","_audio","SetAudioSource","element","src","VisualizeCanvas","canvasElement","stream","canvasCtx","getContext","audioCtx","AudioContext","source","createMediaStreamSource","analyser","createAnalyser","fftSize","bufferLength","frequencyBinCount","dataArray","Uint8Array","connect","draw","WIDTH","width","HEIGHT","height","requestAnimationFrame","getByteTimeDomainData","canvasBgColor","getComputedStyle","getPropertyValue","fillStyle","fillRect","lineWidth","strokeStyle","beginPath","sliceWidth","x","i","y","moveTo","lineTo","stroke","getCSS","css_data","css_obj","length","window"],"mappings":"AAIc,IAAAA,EAAAA,KAAAA,IAAAA,EAAA,CAAA,IACGC,aAAN,MACH,WAAAC,GAOAC,KAAQC,eAAiB,aACzBD,KAAQE,oBAAsB,KAP9B,CAQQ,WAAAC,GACJ,OAAO,IAAIC,SACPC,MAAMC,IACGN,KAAAO,qBAAuBC,UAAUC,aAAaC,aAAa,CAAEC,OAAO,IAGjDX,KAAKE,oBAEfF,KAAKC,eAGnB,MAAMW,EAAgB,IAAIC,cAAcb,KAAKO,gBAC7C,IAAIO,EAAc,GAEJF,EAAAG,iBAAiB,iBAA0BC,IACzCF,EAAAG,KAAKD,EAAME,KAAI,IAsBvBZ,EAAA,CAAEa,MAnBI,KACVL,EAAc,GACdF,EAAcO,OAAM,EAiBPC,KAdJ,IACT,IAAIhB,SAAkBE,IACJM,EAAAG,iBAAiB,QAAQ,KAC7B,MAAAM,EAAY,IAAIC,KAAKR,EAAa,CAAES,KAAMvB,KAAKC,iBAC/CuB,EAAWC,IAAIC,gBAAgBL,GAC/BV,EAAQ,IAAIgB,MAAMH,GAGxBlB,EAAQ,CAAEQ,cAAaO,YAAWG,WAAUI,KAD/B,IAAMjB,EAAMiB,QACyB,IAGtDhB,EAAcQ,MAAK,KAGJ,GAEnC,CAEA,oBAAaS,GACJ7B,KAAK8B,YACD9B,KAAA8B,gBAAkB9B,KAAKG,eAEhCH,KAAK8B,UAAUX,OACnB,CAEA,mBAAaY,GAET,OADA/B,KAAKgC,aAAehC,KAAK8B,UAAUV,OAC5BpB,KAAKgC,MAChB,CAEA,oBAAaC,CAAeC,GAExB,OADQA,EAAAC,IAAMnC,KAAKgC,OAAOR,SACnBxB,KAAKgC,OAAOR,QACvB,CACA,qBAAaY,CAAgBC,GACzB,IAAIC,EAAStC,KAAKO,eAEZ,MAAAgC,EAAYF,EAAcG,WAAW,MACvC,IAAAC,EAAW,IAAIC,aAEb,MAAAC,EAASF,EAASG,wBAAwBN,GAE1CO,EAAWJ,EAASK,iBAC1BD,EAASE,QAAU,KACnB,MAAMC,EAAeH,EAASI,kBACxBC,EAAY,IAAIC,WAAWH,GAEjCL,EAAOS,QAAQP,GAKf,SAASQ,IACL,MAAMC,EAAQjB,EAAckB,MACtBC,EAASnB,EAAcoB,OAE7BC,sBAAsBL,GAEtBR,EAASc,sBAAsBT,GAI/B,IAAIU,EAAgBC,iBAAiBxB,GAAeyB,iBAAiB,oBACrEvB,EAAUwB,UAAYH,GAAiB,mBACvCrB,EAAUyB,SAAS,EAAG,EAAGV,EAAOE,GAEhCjB,EAAU0B,UAAY,EACtB1B,EAAU2B,YAAc,eAExB3B,EAAU4B,YAEN,IAAAC,EAAqB,EAARd,EAAcN,EAC3BqB,EAAI,EAER,IAAA,IAASC,EAAI,EAAGA,EAAItB,EAAcsB,IAAK,CAC/B,IACAC,EADIrB,EAAUoB,GAAK,IACXd,EAAS,EAEX,IAANc,EACU/B,EAAAiC,OAAOH,EAAGE,GAEVhC,EAAAkC,OAAOJ,EAAGE,GAGnBF,GAAAD,CACT,CAEA7B,EAAUkC,OAAOpC,EAAckB,MAAOlB,EAAcoB,OAAS,GAC7DlB,EAAUmC,QACd,CAvCKrB,EAwCT,GAYGxD,EAAS8E,OAAT,SAAgBzC,GAInB,IAHA,IAAI0C,EAAW,GACXC,EAAUhB,iBAAiB3B,GAEtBoC,EAAI,EAAGA,EAAIO,EAAQC,OAAQR,IAE5BM,GAAAC,EAAQP,GAAK,IACbO,EAAQf,iBAAiBe,EAAQP,IAC/B,QAEH,OAAAM,CACX,EAtJAG,OAAgB,QAAI,IAAIlF,EAAcC"}
{"version":3,"file":"LocalStorage.min.js","sources":["../../Types/LocalStorage/LocalStorageJs.ts"],"sourcesContent":["/**\r\n * Function to load and initialize the LocalStorage module in the window object.\r\n */\r\nexport function Load(): void {\r\n    window['LocalStorageJs'] = new LocalStorageJsModule.LocalStorageJsClass();\r\n}\r\n\r\n/**\r\n * Module containing LocalStorage functionality.\r\n */\r\nexport module LocalStorageJsModule {\r\n    /**\r\n     * Class that handles LocalStorage operations.\r\n     */\r\n    export class LocalStorageJsClass {\r\n        /**\r\n         * Initializes a new instance of the LocalStorageJsClass.\r\n         */\r\n        constructor() {\r\n        }\r\n\r\n        /**\r\n         * Sets an item in the localStorage with the specified key and value.\r\n         * @param key The key to store the value under.\r\n         * @param value The value to store.\r\n         * @returns A promise that resolves when the operation is complete.\r\n         */\r\n        public async SetItemAsync(key: string, value: string): Promise<void> {\r\n            try {\r\n                localStorage.setItem(key, value);\r\n            } catch (error) {\r\n                console.error('Error setting localStorage item:', error);\r\n                throw error;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Gets an item from localStorage by key.\r\n         * @param key The key of the item to retrieve.\r\n         * @returns A promise that resolves with the value, or null if not found.\r\n         */\r\n        public async GetItemAsync(key: string): Promise<string | null> {\r\n            try {\r\n                return localStorage.getItem(key);\r\n            } catch (error) {\r\n                console.error('Error getting localStorage item:', error);\r\n                throw error;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Removes an item from localStorage by key.\r\n         * @param key The key of the item to remove.\r\n         * @returns A promise that resolves when the operation is complete.\r\n         */\r\n        public async RemoveItemAsync(key: string): Promise<void> {\r\n            try {\r\n                localStorage.removeItem(key);\r\n            } catch (error) {\r\n                console.error('Error removing localStorage item:', error);\r\n                throw error;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Clears all items from localStorage.\r\n         * @returns A promise that resolves when the operation is complete.\r\n         */\r\n        public async ClearAsync(): Promise<void> {\r\n            try {\r\n                localStorage.clear();\r\n            } catch (error) {\r\n                console.error('Error clearing localStorage:', error);\r\n                throw error;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Gets all keys that start with a specific prefix.\r\n         * @param prefix The prefix to search for.\r\n         * @returns A promise that resolves with an array of matching keys.\r\n         */\r\n        public async GetKeysByPrefixAsync(prefix: string): Promise<string[]> {\r\n            try {\r\n                const keys: string[] = [];\r\n                for (let i = 0; i < localStorage.length; i++) {\r\n                    const key = localStorage.key(i);\r\n                    if (key && key.startsWith(prefix)) {\r\n                        keys.push(key);\r\n                    }\r\n                }\r\n                return keys;\r\n            } catch (error) {\r\n                console.error('Error getting keys by prefix:', error);\r\n                throw error;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Clears all items from localStorage that start with a specific prefix.\r\n         * @param prefix The prefix of the keys to clear.\r\n         * @returns A promise that resolves when the operation is complete.\r\n         */\r\n        public async ClearByPrefixAsync(prefix: string): Promise<void> {\r\n            try {\r\n                const keys = await this.GetKeysByPrefixAsync(prefix);\r\n                for (const key of keys) {\r\n                    localStorage.removeItem(key);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error clearing items by prefix:', error);\r\n                throw error;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Initialize the module when loaded.\r\n */\r\nLoad();"],"names":["LocalStorageJsModule","LocalStorageJsClass","constructor","SetItemAsync","key","value","localStorage","setItem","error","GetItemAsync","getItem","RemoveItemAsync","removeItem","ClearAsync","clear","GetKeysByPrefixAsync","prefix","keys","i","length","startsWith","push","ClearByPrefixAsync","this","window"],"mappings":"AAUc,IAAAA,GAAAA,IAAAA,EAAA,CAAA,IAIGC,oBAAN,MAIH,WAAAC,GACA,CAQA,kBAAaC,CAAaC,EAAaC,GAC/B,IACaC,aAAAC,QAAQH,EAAKC,SACrBG,GAEC,MAAAA,CACV,CACJ,CAOA,kBAAaC,CAAaL,GAClB,IACO,OAAAE,aAAaI,QAAQN,SACvBI,GAEC,MAAAA,CACV,CACJ,CAOA,qBAAaG,CAAgBP,GACrB,IACAE,aAAaM,WAAWR,SACnBI,GAEC,MAAAA,CACV,CACJ,CAMA,gBAAaK,GACL,IACAP,aAAaQ,cACRN,GAEC,MAAAA,CACV,CACJ,CAOA,0BAAaO,CAAqBC,GAC1B,IACA,MAAMC,EAAiB,GACvB,IAAA,IAASC,EAAI,EAAGA,EAAIZ,aAAaa,OAAQD,IAAK,CACpC,MAAAd,EAAME,aAAaF,IAAIc,GACzBd,GAAOA,EAAIgB,WAAWJ,IACtBC,EAAKI,KAAKjB,EAElB,CACO,OAAAa,QACFT,GAEC,MAAAA,CACV,CACJ,CAOA,wBAAac,CAAmBN,GACxB,IACA,MAAMC,QAAaM,KAAKR,qBAAqBC,GAC7C,IAAA,MAAWZ,KAAOa,EACdX,aAAaM,WAAWR,SAEvBI,GAEC,MAAAA,CACV,CACJ,GA7GJgB,OAAuB,eAAI,IAAIxB,EAAqBC"}
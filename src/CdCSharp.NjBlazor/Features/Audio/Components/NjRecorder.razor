@using CdCSharp.NjBlazor.Core.Abstractions.Components
@using CdCSharp.NjBlazor.Features.Audio.Abstractions

@namespace CdCSharp.NjBlazor.Features.Audio.Components

@inherits NjComponentBase

@inject IAudioJsInterop audioJs

@* <CssInclude SettingsName="@nameof(Nj.Blazor.Audio)" Refs="@(new string[]{
"_content/Nj.Blazor.Audio/Nj.Blazor.Audio.bundle.scp.css"
})" /> *@

<div class="container-fluid">
    <div class="row">
        <div class="col-12 col-md-3">
            <button class="btn btn-outline-primary" disabled="@Recording" @onclick="Record">
                <span class="icon-mic align-text-bottom">Graba</span>
            </button>
            <button class="btn btn-outline-primary" disabled="@(!Recording)" @onclick="Stop">
                <span class="icon-stop align-text-bottom">PAraaaa</span>
            </button>
        </div>

        <div class="col-12 col-md-9 text-end">

            @{
                var _displayCanvas = Recording ? "inline-flex" : "none";
            }
            <canvas @ref="_canvasAudioRef" id="audio-canvas" class="w-100 bg-light" style="display: @_displayCanvas" height="30"></canvas>
            @{
                object _displayAudioControl = !Recording && Recorded ? "inline-flex" : "none";
                ;
            }
            <audio @ref="_audioFileRef" id="audio-file" class="w-100" style="display: @_displayAudioControl" controls="download">
            </audio>
        </div>

    </div>

</div>

@code {

    bool Recording { get; set; }
    bool Recorded { get; set; }
    private ElementReference _audioFileRef;
    private ElementReference _canvasAudioRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task Record()
    {
        Recording = true;
        await audioJs.StartRecordingAsync();
        await audioJs.VisualizeCanvasAsync(_canvasAudioRef);
        StateHasChanged();
    }

    private async Task Stop()
    {
        Recording = false;
        var audio = await audioJs.StopRecordingAsync();
        var audioUrl = await audioJs.SetAudioSourceAsync(_audioFileRef);
        Recorded = true;
        StateHasChanged();
    }

}
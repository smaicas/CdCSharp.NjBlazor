@using CdCSharp.NjBlazor.Core.Abstractions.Components
@using CdCSharp.NjBlazor.Core.Css
@using CdCSharp.NjBlazor.Features.Media.Components
@using System.Globalization
@namespace CdCSharp.NjBlazor.Features.Layout.Components.Tree
@inherits NjComponentBase

<CascadingValue Value="this">
    @ChildContent
</CascadingValue>
<div class="@(AsClass(
        "nj-tree",
        Class))"
     style="@($"flex-direction:{CssTools.CalculateCssFlexDirectionClass(Direction)}")">
    @foreach (var node in ChildNodes)
    {
        <div class="nj-tree-node">
            <div class="@(AsClass(
        "nj-tree-node-title"))"
                 @onclick="() => ToggleNode(node)"
                 style="@($"padding-left:{CssTools.CalculateCssTreePaddingValue(node.DeepLevel * DeepPadding).ToString(CultureInfo.InvariantCulture)}rem;")">
                @if (node.ChildNodes.Any())
                {
                    @if (node.CachedOpen)
                    {
                        <NjSvgIcon Icon="@Media.Icons.NjIcons.Materials.MaterialIcons.i_arrow_drop_down"></NjSvgIcon>
                    }
                    else
                    {
                        <NjSvgIcon Icon="@Media.Icons.NjIcons.Materials.MaterialIcons.i_arrow_right"></NjSvgIcon>
                    }
                }
                @node.Title
            </div>
            @if (node.CachedOpen)
            {
                <div class="nj-tree-node-childs">
                    @RenderChildNodes(node)
                </div>
            }
        </div>
    }
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        foreach (var node in ChildNodes)
        {
            await node.InitializeOpenStateAsync();
        }
    }
}